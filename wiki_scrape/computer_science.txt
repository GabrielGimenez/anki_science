*'''[[Abstract data type]]''' – (ADT), is a [[mathematical model]] for [[data type]]s, where a data type is defined by its behavior ([[Semantics (computer science)|semantics]]) from the point of view of a ''user'' of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations. This contrasts with [[data structure]]s, which are concrete representations of data, and are the point of view of an implementer, not a user.
*'''[[Abstract method]]''' – is one with only a [[method signature|signature]] and no [[method body|implementation body]]. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify [[Interface (computing)|interfaces]] in some computer languages.<ref>{{cite web|title=Abstract Methods and Classes|url=http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html|website=oracle.com|publisher=Oracle Java Documentation|accessdate=11 December 2014}}</ref>
*'''[[Abstraction (software engineering)|Abstraction]]''' – In [[software engineering]] and [[computer science]], abstraction is:
*'''[[Agent architecture]]''' – is a [[blueprint]] for [[software agent]]s and [[intelligent control]] systems, depicting the arrangement of components. The architectures implemented by [[intelligent agent]]s are referred to as [[cognitive architecture]]s.<ref>[http://hri.cogs.indiana.edu/publications/aaai04ws.pdf Comparison of Agent Architectures] {{webarchive |url=https://web.archive.org/web/20080827222057/http://hri.cogs.indiana.edu/publications/aaai04ws.pdf |date=August 27, 2008 }}</ref>
*'''[[Agent-based model]]''' – (ABM), is a class of [[computational models]] for [[computer simulation|simulating]] the actions and interactions of autonomous agents (both individual or collective entities such as organizations or groups) with a view to assessing their effects on the system as a whole. It combines elements of [[game theory]], [[complex systems]], [[emergence]], [[computational sociology]], [[multi-agent system]]s, and [[evolutionary programming]]. [[Monte Carlo method]]s are used to introduce randomness.
*'''[[Aggregate function]]''' – In [[database management]] an aggregate function is a [[subroutine|function]] where the values of multiple rows are grouped together to form a single value of more significant meaning or measurement such as a [[set (computer science)|set]], a [[set (computer science)#Multiset|bag]] or a [[list (computing)|list]].
*'''[[Agile software development]]''' – is an approach to [[software development]] under which requirements and solutions evolve through the collaborative effort of [[Self-organizing communities|self-organizing]] and [[cross-functional team|cross-functional]] teams and their [[Customer|customer(s)]]/[[End user|end user(s)]].<ref name="Collier 2011">{{cite book |title= Agile Analytics: A Value-Driven Approach to Business Intelligence and Data Warehousing |last=Collier|first=Ken W. |year=2011 |publisher= Pearson Education |isbn=9780321669544 | pages= 121 ff|quote=What is a self-organizing team?}}</ref> It advocates adaptive planning, evolutionary development, early delivery, and [[Continual improvement process|continual improvement]], and it encourages rapid and flexible response to change.<ref name="WhatIsAgile">{{cite web|url = http://www.agilealliance.org/the-alliance/what-is-agile/|title = What is Agile Software Development?|date = 8 June 2013|accessdate = 4 April 2015|publisher = Agile Alliance}}</ref> 
*'''[[Algorithm]]''' – is an unambiguous specification of how to solve a class of problems. Algorithms can perform [[calculation]], [[data processing]] and [[automated reasoning]] tasks.
*'''[[Algorithm design]]''' – refers to a method or mathematical process for problem solving and engineering algorithms. The design of algorithms is part of many solution theories of [[operation research]], such as [[dynamic programming]] and [[Divide and conquer algorithm|divide-and-conquer]]. Techniques for designing and implementing algorithm designs are also called algorithm design patterns,<ref>{{citation|url=http://ww3.algorithmdesign.net/ch00-front.html|title=Algorithm Design: Foundations, Analysis, and Internet Examples|last1=Goodrich|first1=Michael T.|author1-link=Michael T. Goodrich|last2=Tamassia|first2=Roberto|author2-link=Roberto Tamassia|publisher=John Wiley & Sons, Inc.|year=2002|isbn=978-0-471-38365-9}}</ref> such as the template method pattern and decorator pattern.
*'''[[Algorithmic efficiency]]''' – is a property of an [[algorithm]] which relates to the number of [[computational resource]]s used by the algorithm. An algorithm must be [[analysis of algorithms|analyzed]] to determine its resource usage, and the efficiency of an algorithm can be measured based on usage of different resources. Algorithmic efficiency can be thought of as analogous to engineering [[productivity]] for a repeating or continuous process.
*'''[[ASCII]]''' – abbreviated from '''American Standard Code for Information Interchange''', is a [[character encoding]] standard for electronic communication. ASCII codes represent text in computers, [[telecommunications equipment]], and other devices. Most modern character-encoding schemes are based on ASCII, although they support many additional characters.
*'''[[Application programming interface]]''' – (API) is a set of subroutine definitions, [[communication protocols]], and tools for building software. In general terms, it is a set of clearly defined methods of communication among various components. A good API makes it easier to develop a [[computer program]] by providing all the building blocks, which are then put together by the [[programmer]].
*'''[[Application software]]''' – (app or application for short) is [[computer software]] designed to perform a group of coordinated functions, tasks, or activities for the benefit of the user. Examples of an application include a [[word processor]], a [[spreadsheet]], an [[accounting software|accounting application]], a [[web browser]], a [[media player (software)|media player]], an aeronautical [[flight simulator]], a [[console game]] or a [[Raster graphics editor|photo editor]]. The [[collective noun]] application software refers to all applications collectively.<ref>{{cite web |title=Application software |url=https://www.pcmag.com/encyclopedia/term/37919/application-program | work=[[PC Magazine]] |publisher=[[Ziff Davis]]}}</ref> This contrasts with [[system software]], which is mainly involved with running the computer.
*'''[[Array data structure]]''' – or simply an array, is a [[data structure]] consisting of a collection of ''elements'' ([[value (computer science)|values]] or [[variable (programming)|variables]]), each identified by at least one ''array index'' or ''key''. An array is stored such that the position of each element can be computed from its index [[tuple]] by a mathematical formula.<ref>{{cite web|url=https://xlinux.nist.gov/dads/HTML/array.html|title=array|last=Black|first=Paul E.|date=13 November 2008|work=[[Dictionary of Algorithms and Data Structures]]|publisher=[[National Institute of Standards and Technology]]|accessdate=22 August 2010}}</ref><ref name="andres">{{cite arXiv |eprint=1008.2909 |author1=Bjoern Andres |author2=Ullrich Koethe |author3=Thorben Kroeger |author4=Hamprecht |title=Runtime-Flexible Multi-dimensional Arrays and Views for C++98 and C++0x |class=cs.DS |year=2010}}</ref><ref name="garcia">{{Cite journal|last1=Garcia|first1=Ronald |first2=Andrew |last2=Lumsdaine|year=2005|title=MultiArray: a C++ library for generic programming with arrays|journal=Software: Practice and Experience|volume=35|issue=2|pages=159–188|issn=0038-0644|doi=10.1002/spe.630}}</ref> The simplest type of data structure is a linear array, also called one-dimensional array.
*'''[[Artifact (software development)|Artifact]]''' – is one of many kinds of tangible by-products produced during the development of software. Some artifacts (e.g., [[use case]]s, [[class diagram]]s, and other [[Unified Modeling Language]] (UML) models, requirements and design documents) help describe the function, architecture, and design of software. Other artifacts are concerned with the process of development itself—such as project plans, business cases, and risk assessments.
*'''[[Artificial intelligence]]''' – (AI), sometimes called [[machine]] intelligence, is [[intelligence]] demonstrated by [[machine]]s, in contrast to the '''[[natural]] intelligence'''<!--boldface per WP:R#PLA--> displayed by humans and other animals.  In [[computer science]]  AI research is defined as the study of "[[intelligent agent]]s": any device that perceives its environment and takes actions that maximize its chance of successfully achieving its goals.<ref name="Definition of AI">
*'''[[ASCII]]''' – American Standard Code for Information Interchange.
*'''[[Assertion (software development)|Assertion]]''' – In [[computer programming]], an assertion is a [[Statement (computer science)|statement]] that a [[Predicate (mathematical logic)|predicate]] ([[Boolean-valued function]], i.e. a true–false [[Expression (computer science)|expression]]) is always true at that point in code execution.  It can help a programmer read the code, help a compiler compile it, or help the program detect its own defects. For the latter, some programs check assertions by actually evaluating the predicate as they run and if it is not in fact true, an assertion failure, the program considers itself to be broken and typically deliberately [[Crash (computing)|crashes]] or throws an assertion failure [[exception handling|exception]].
*'''[[Associative array]]''' –
*'''[[Automata theory]]''' – is the study of [[abstract machine]]s and [[automaton|automata]], as well as the [[computational problem]]s that can be solved using them. It is a theory in [[theoretical computer science]] and [[discrete mathematics]] (a subject of study in both [[mathematics]] and [[computer science]]). The word ''automata'' (the plural of ''automaton'') comes from the Greek word αὐτόματα, which means "self-acting".
*'''[[Automated reasoning]]''' – is an area of [[computer science]] and [[mathematical logic]] dedicated to understanding different aspects of [[reasoning]]. The study of automated reasoning helps produce [[computer programs]] that allow computers to reason completely, or nearly completely, automatically. Although automated reasoning is considered a sub-field of [[artificial intelligence]], it also has connections with [[theoretical computer science]], and even [[philosophy]].
*'''[[Bandwidth (computing)|Bandwidth]]''' – is the maximum rate of data transfer across a given path. Bandwidth may be characterized as '''network bandwidth''',<ref>[[Douglas Comer]], [https://books.google.co.uk/books?id=tm-evHmOs3oC&pg=PA99&dq=%22network+bandwidth%22+%22computer+networks%22&hl=en&ei=mvqcTOHIMIb2tgPbnpXWAQ&sa=X&oi=book_result&ct=result&redir_esc=y#v=onepage&q&f=false Computer Networks and Internets], page 99 ff, Prentice Hall 2008.</ref> '''data bandwidth''',<ref>Fred Halsall, [https://books.google.com/books?ei=dvycTJ2BDoqosAOhu_DVAQ&ct=result&hl=en&id=HrXbAAAAMAAJ&dq=%100data+bandwidth%100++%100computer+networks%22&q=%100data+bandwidth%100+Introduction to data+communications and computer networks], page 108, Addison-Wesley, 1985.</ref> or '''digital bandwidth'''.<ref>[https://books.google.co.uk/books?ei=rfmcTPKEN5L6swOekeXVAQ&ct=result&hl=en&id=7gqsZmr5HJcC&dq=+0digital+bandwidth+0+%22&redir_esc=y Cisco Networking Academy Program: CCNA 1 and 2 companion guide, Volym 1–2], Cisco Academy 2003</ref><ref>[[Behrouz A. Forouzan]], ''Data communications and networking'', McGraw-Hill, 2007</ref>
*'''[[Bayesian programming]]''' – is a formalism and a methodology for having a technique to specify [[Probability distribution|probabilistic models]] and solve problems when less than the necessary information is available.
*'''[[Benchmark (computing)|Benchmark]]''' – is the act of running a [[computer program]], a set of programs, or other operations, in order to assess the relative '''performance''' of an object, normally by running a number of standard tests and trials against it.<ref>{{Cite journal| doi = 10.1145/5666.5673| issn = 0001-0782| volume = 29| issue = 3| pages = 218–221| last1 = Fleming| first1 = Philip J.| last2 = Wallace| first2 = John J.| title = How not to lie with statistics: the correct way to summarize benchmark results| journal = Communications of the ACM| date = 1986-03-01}}</ref> The term ''benchmark'' is also commonly utilized for the purposes of elaborately designed benchmarking programs themselves.
*'''[[Best, worst and average case]]''' – '''best''', '''worst,''' and '''average cases''' of a given [[algorithm]] express what the [[Resource (computer science)|resource]] usage is ''at least'', ''at most'' and ''on average'', respectively. Usually the resource being considered is running time, i.e. [[time complexity]], but it could also be memory or other resource.  Best case is the function which performs the minimum number of steps on input data of n elements.  Worst case is the function which performs the maximum number of steps on input data of size n. Average case is the function which performs an average number of steps on input data of n elements. 
*'''[[Big data]]''' – is a term used to refer to [[data set]]s that are too large or complex for traditional [[data processing|data-processing]] [[application software]] to adequately deal with. Data with many cases (rows) offer greater [[statistical power]], while data with higher complexity (more attributes or columns) may lead to a higher [[false discovery rate]].<ref>{{Cite journal|last=Breur|first=Tom|date=July 2016|title=Statistical Power Analysis and the contemporary "crisis" in social sciences|journal=Journal of Marketing Analytics|language=en|volume=4|issue=2–3|pages=61–65|doi=10.1057/s41270-016-0001-3|issn=2050-3318|doi-access=free}}</ref>
*'''[[Big O notation]]''' – is a mathematical notation that describes the [[asymptotic analysis|limiting behavior]] of a [[function (mathematics)|function]] when the argument tends towards a particular value or infinity.  It is a member of a family of notations invented by [[Paul Gustav Heinrich Bachmann|Paul Bachmann]],<ref name=Bachmann>{{cite book |first=Paul |last=Bachmann |authorlink=Paul Bachmann |title=Analytische Zahlentheorie |trans-title=Analytic Number Theory |language=de |volume=2 |location=Leipzig |publisher=Teubner |date=1894 |url=https://archive.org/stream/dieanalytischeza00bachuoft#page/402/mode/2up}}</ref> [[Edmund Landau]],<ref name=Landau>{{cite book |first=Edmund |last=Landau |authorlink=Edmund Landau |title=Handbuch der Lehre von der Verteilung der Primzahlen |publisher=B. G. Teubner |date=1909 |location=Leipzig |trans-title=Handbook on the theory of the distribution of the primes |language=de |page=883 | url=https://archive.org/details/handbuchderlehre01landuoft}}</ref> and others, collectively called '''Bachmann–Landau notation''' or '''asymptotic notation'''.
*'''[[Binary number]]''' – In mathematics and [[digital electronics]], a '''binary number''' is a [[number]] expressed in the '''base-2 numeral system''' or '''binary numeral system''', which uses only two symbols: typically [[0 (number)|0 (zero)]] and [[1 (number)|1 (one)]].
*'''[[Binary search algorithm]]''' – '''binary search''', also known as '''half-interval search''',<ref name="Williams1976">{{cite conference|last1=Williams, Jr.|first1=Louis F.|title=A modification to the half-interval search (binary search) method|conference=Proceedings of the 14th ACM Southeast Conference|date=22 April 1976|pages=95–101|doi=10.1145/503561.503582|url=https://dl.acm.org/citation.cfm?doid=503561.503582|publisher=ACM|accessdate=29 June 2018|archive-url=https://web.archive.org/web/20170312215255/http://dl.acm.org/citation.cfm?doid=503561.503582|archive-date=12 March 2017|url-status=live|df=dmy-all}}</ref> '''logarithmic search''',{{Sfn|Knuth|1998|loc=§6.2.1 ("Searching an ordered table"), subsection "Binary search"}} or '''binary chop''',{{Sfn|Butterfield|Ngondi|2016|p=46}} is a [[search algorithm]] that finds the position of a target value within a [[sorted array]].{{Sfn|Cormen|Leiserson|Rivest|Stein|2009|p=39}}<ref>{{MathWorld |title=Binary search |id=BinarySearch}}</ref> 
*'''[[Binary tree]]''' – is a [[tree structure|tree]] [[data structure]] in which each node has at most two [[child node|children]], which are referred to as the ''{{visible anchor|left child}}'' and the ''{{visible anchor|right child}}''.  A [[recursive definition]] using just [[set theory]] notions is that a (non-empty) binary tree is a [[tuple]] (''L'', ''S'', ''R''), where ''L'' and ''R'' are binary trees or the [[empty set]] and ''S'' is a [[singleton set]].<ref name="GarnierTaylor2009">{{cite book|author1=Rowan Garnier|author2=John Taylor|title=Discrete Mathematics: Proofs, Structures and Applications, Third Edition|url=https://books.google.com/books?id=WnkZSSc4IkoC&pg=PA620|year=2009|publisher=CRC Press|isbn=978-1-4398-1280-8|page=620}}</ref> Some authors allow the binary tree to be the empty set as well.<ref name="Skiena2009">{{cite book|author=Steven S Skiena|title=The Algorithm Design Manual|url=https://books.google.com/books?id=7XUSn0IKQEgC&pg=PA77|year=2009|publisher=Springer Science & Business Media|isbn=978-1-84800-070-4|page=77}}</ref>
*'''[[Bioinformatics]]''' – is an [[interdisciplinary]] field that develops methods and [[software tool]]s for understanding [[biology|biological]] data. As an interdisciplinary field of science, bioinformatics combines [[biology]], [[computer science]], [[Information engineering (field)|information engineering]], [[mathematics]] and [[statistics]] to analyze and interpret biological data. Bioinformatics has been used for ''[[in silico]]'' analyses of biological queries using mathematical and statistical techniques.
*'''[[Bit]]''' – (a [[portmanteau]] of '''binary digit''')<ref name="Mackenzie_1980">{{cite book |title=Coded Character Sets, History and Development |work=The Systems Programming Series |author-last=Mackenzie |author-first=Charles E. |year=1980 |edition=1 |publisher=[[Addison-Wesley Publishing Company, Inc.]] |isbn=978-0-201-14460-4 |lccn=77-90165 |page=x |url=https://books.google.com/books?id=6-tQAAAAMAAJ |accessdate=2016-05-22 |url-status=live |archiveurl=https://web.archive.org/web/20161118230039/https://books.google.com/books?id=6-tQAAAAMAAJ |archivedate=18 November 2016 |df=dmy-all }} [https://web.archive.org/web/20160526172151/https://textfiles.meulie.net/bitsaved/Books/Mackenzie_CodedCharSets.pdf]</ref> is a [[Units of information|basic unit]] of [[information]] used in [[computing]] and digital [[communication]]s.  A [[Binary number|binary]] digit can have only one of two [[value (computer science)|values]], and may be physically represented with a two-state device. These state values are most commonly represented as either a {{gaps|0|or|1}}.
*'''[[Bit rate]]''' – In [[telecommunications]] and [[computing]], '''bit rate''' ('''bitrate''' or as a variable ''R'') is the number of [[bit]]s that are conveyed or processed per unit of time.<ref>{{cite book |url = https://books.google.com/books?id=-kNn_p6WA38C&pg=PA21&dq=bit+%22rate+R%22#v=onepage&q=bit%20%22rate%20R%22&f=false |title=Data Communications and Computer Networks | first =Prakash C | last = Gupta |publisher=PHI Learning |year= 2006 |accessdate=10 July 2011|isbn=9788120328464 }}</ref>
*'''[[Blacklist (computing)|Blacklist]]''' – In [[computing]], a '''blacklist''' or '''block list''' is a basic [[access control]] mechanism that allows through all elements (email addresses, users, passwords, [[URLs]], [[IP address]]es, [[domain name]]s, file [[MD5 Hash|hashes]], etc.), except those explicitly mentioned. Those items on the list are denied access. The opposite is a [[whitelist]], which means only items on the list are let through whatever gate is being used. A [[Greylisting (email)|greylist]] contains items that are temporarily blocked (or temporarily allowed) until an additional step is performed.
*'''[[BMP file format]]''' –  also known as '''bitmap image file''' or '''device independent bitmap (DIB) file format''' or simply a '''bitmap''', is a [[raster graphics]] [[image file format]] used to store [[bitmap]] [[digital image]]s, independently of the [[display device]] (such as a [[graphics adapter]]), especially on [[Microsoft Windows]]<ref name="bmp">{{cite book|title=Encyclopedia of Graphics File Formats|edition=Second|date=April 1996|author=James D. Murray|author2=William vanRyper|isbn=978-1-56592-161-0|publisher=[[O'Reilly Media|O'Reilly]]|at=bmp|url=https://archive.org/details/mac_Graphics_File_Formats_Second_Edition_1996|accessdate=2014-03-07}}</ref> and [[OS/2]]<ref name="os2bmp">{{cite book|title=Encyclopedia of Graphics File Formats|edition=Second|date=April 1996|author=James D. Murray|author2=William vanRyper|isbn=978-1-56592-161-0|publisher=[[O'Reilly Media|O'Reilly]]|at=os2bmp|url=https://archive.org/details/mac_Graphics_File_Formats_Second_Edition_1996|accessdate=2014-03-07}}</ref> operating systems.
*'''[[Boolean data type]]''' – is a [[data type]] that has one of two possible values (usually denoted ''true'' and ''false''), intended to represent the two [[truth value]]s of [[logic]] and [[Boolean algebra]]. It is named after [[George Boole]], who first defined an algebraic system of logic in the mid 19th century. The Boolean data type is primarily associated with [[Conditional (computer programming)|conditional]] statements, which allow different actions by changing [[control flow]] depending on whether a programmer-specified Boolean ''condition'' evaluates to true or false. It is a special case of a more general ''logical data type (see [[probabilistic logic]])—''logic need not always be Boolean.
*'''[[Boolean expression]]''' – is used [[Expression (programming)|expression]] in a [[programming language]] that produces a [[Boolean value]] when evaluated, that is one of '''true''' or '''false'''. A Boolean expression may be composed of a combination of the Boolean constants '''true''' or '''false''', [[Boolean data type|Boolean-typed]] variables, Boolean-valued operators, and [[Boolean-valued function]]s.<ref>{{citation
*'''[[Boolean algebra]]''' – In [[mathematics]] and [[mathematical logic]], '''Boolean algebra''' is the branch of [[algebra]] in which the values of the [[variable (mathematics)|variables]] are the [[truth value]]s ''true'' and ''false'', usually denoted 1 and 0 respectively. Instead of [[elementary algebra]] where the values of the variables are numbers, and the prime operations are addition and multiplication, the main operations of Boolean algebra are the [[Logical conjunction|conjunction]] ''and'' denoted as ∧, the [[Logical disjunction|disjunction]] ''or'' denoted as ∨, and the [[negation]] ''not'' denoted as ¬. It is thus a formalism for describing logical relations in the same way that elementary algebra describes numeric relations.
*'''[[Byte]]''' – is a [[units of information|unit of digital information]] that most commonly consists of eight [[bit]]s, representing a [[binary number]]. Historically, the byte was the number of bits used to encode a single [[character (computing)|character]] of text in a computer<ref name="Buchholz_1962">{{anchor|Buchholz-1962}}{{citation |title=Planning a Computer System – Project Stretch |author-first1=Gerrit Anne |author-last1=Blaauw |author-link1=Gerrit Anne Blaauw |author-first2=Frederick Phillips |author-last2=Brooks, Jr. |author-link2=Frederick Phillips Brooks, Jr. |author-first3=Werner |author-last3=Buchholz |author-link3=Werner Buchholz |editor-first=Werner |editor-last=Buchholz |editor-link=Werner Buchholz |publisher=[[McGraw-Hill Book Company, Inc.]] / The Maple Press Company, York, PA. |lccn=61-10466 |year=1962 |chapter=4: Natural Data Units |pages=39–40 |chapter-url=http://archive.computerhistory.org/resources/text/IBM/Stretch/pdfs/Buchholz_102636426.pdf |access-date=2017-04-03 |url-status=live |archive-url=https://web.archive.org/web/20170403014651/http://archive.computerhistory.org/resources/text/IBM/Stretch/pdfs/Buchholz_102636426.pdf |archive-date=2017-04-03 |quote=[…] Terms used here to describe the structure imposed by the machine design, in addition to ''[[bit]]'', are listed below.<br />''Byte'' denotes a group of bits used to encode a character, or the number of bits transmitted in parallel to and from input-output units. A term other than ''[[character (computing)|character]]'' is used here because a given character may be represented in different applications by more than one code, and different codes may use different numbers of bits (i.e., different byte sizes). In input-output transmission the grouping of bits may be completely arbitrary and have no relation to actual characters. (The term is coined from ''[[bite]]'', but respelled to avoid accidental mutation to ''bit''.)<br />A ''[[Word (unit)|word]]'' consists of the number of data bits transmitted in parallel from or to memory in one memory cycle. [[Word size]] is thus defined as a structural property of the memory. (The term ''[[catena (unit)|catena]]'' was coined for this purpose by the designers of the [[Groupe Bull|Bull]] {{ill|Bull Gamma 60{{!}}GAMMA 60|fr|Gamma 60}} computer.)<br />''[[Block (data storage)|Block]]'' refers to the number of words transmitted to or from an input-output unit in response to a single input-output instruction. Block size is a structural property of an input-output unit; it may have been fixed by the design or left to be varied by the program. […]}}</ref><ref name="Bemer_1959">{{citation |author-first=Robert William |author-last=Bemer |author-link=Robert William Bemer |title=A proposal for a generalized card code of 256 characters |journal=[[Communications of the ACM]] |volume=2 |number=9 |pages=19–23 |year=1959 |doi=10.1145/368424.368435}}</ref> and for this reason it is the smallest [[address space|addressable]] unit of [[Computer memory|memory]] in many [[computer architecture]]s.
*'''[[Booting]]'''- is starting up a [[computer]] or [[computer appliance]] until it can be used. It can be initiated by hardware such as a button press or by software command. After the power is switched on, the computer is relatively dumb and can read only part of its storage called [[read-only memory]]. There, a small program is stored called [[firmware]]. It does [[power-on self-test]]s and, most importantly, allows accessing other types of memory like a [[hard disk]] and [[main memory]]. The firmware loads bigger [[computer program|program]]s into the computer's [[random-access memory|main memory]] and runs it.
*'''[[Callback (computer programming)|Callback]]''' – also known as a "call-after<ref>{{cite web|url=https://stackoverflow.com/a/7549753/653708|title=What is a callback function?|website=Stack Overflow|access-date=2018-05-16}}</ref> " function, is any [[executable code]] that is passed as an [[argument (computer science)|argument]] to other code that is expected to ''call back'' (execute) the argument at a given time. This execution may be immediate as in a '''synchronous callback''', or it might happen at a later time as in an '''asynchronous callback'''. 
*'''[[Central processing unit]]''' – ('''CPU''') is the [[electronic circuit]]ry within a [[computer]] that carries out the [[Instruction (computing)|instructions]] of a [[computer program]] by performing the basic [[arithmetic]], logic, controlling and [[input/output]] (I/O) operations specified by the instructions. The computer industry has used the term "central processing unit" at least since the early 1960s.<ref name="weik1961">{{cite journal | author = Weik, Martin H. | title = A Third Survey of Domestic Electronic Digital Computing Systems | publisher = [[Ballistic Research Laboratory]] | url = http://ed-thelen.org/comp-hist/BRL61.html | year = 1961 }}</ref> Traditionally, the term "CPU" refers to a '''processor''', more specifically to its processing unit and [[control unit]] (CU), distinguishing these core elements of a computer from external components such as [[main memory]] and [[I/O]] circuitry.<ref name="kuck">{{cite book|last1= Kuck|first1= David|title= Computers and Computations, Vol 1|date= 1978|publisher= John Wiley & Sons, Inc.|isbn= 978-0471027164|page= 12}}</ref>
*'''[[Character (computing)|Character]]''' – In [[computer]] and machine-based [[telecommunication]]s terminology, a '''character''' is a unit of [[information]] that roughly corresponds to a [[grapheme]], grapheme-like unit, or symbol, such as in an [[alphabet]] or [[syllabary]] in the [[written language|written]] form of a [[natural language]].<ref>{{cite web|url=http://www.merriam-webster.com/dictionary/character|title=Definition of CHARACTER|author=|date=|website=www.merriam-webster.com|accessdate=1 April 2018}}</ref>
*'''[[Cipher]]''' – In [[cryptography]], a '''cipher''' (or '''cypher''') is an [[algorithm]] for performing [[encryption]] or [[decryption]]&mdash;a series of well-defined steps that can be followed as a procedure.
*'''[[Class (computer science)|Class]]''' – In [[object-oriented programming]], a '''class''' is an extensible program-code-template for creating [[Object (object-oriented programming)|object]]s, providing initial values for state ([[member variable]]s) and implementations of behavior (member functions or [[Method (computer programming)|methods]]).{{sfn|Gamma|Helm|Johnson|Vlissides|1995| p=14}}{{sfn|Bruce|2002|loc=2.1 Objects, classes, and object types, {{Google books|9NGWq3K1RwUC|Objects, classes, and object types|page=18|plainurl=yes}}}} In many languages, the class name is used as the name for the class (the template itself), the name for the default [[Constructor (object-oriented programming)|constructor]] of the class (a [[subroutine]] that creates objects), and as the [[data type|type]] of objects generated by [[Instance (computer science)|instantiating]] the class; these distinct concepts are easily conflated.{{sfn|Bruce|2002|loc=2.1 Objects, classes, and object types, {{Google books|9NGWq3K1RwUC|Objects, classes, and object types|page=18|plainurl=yes}}}}
*'''[[Class-based programming]]''' – or more commonly '''class-orientation''', is a style of [[Object-oriented programming]] (OOP) in which inheritance occurs via defining ''[[Class (computer programming)|classes]]'' of [[Object (computer science)|objects]], instead of inheritance occurring via the objects alone (compare [[prototype-based programming]]).
*'''[[Class-based programming|Class-orientation]]''' – is a style of [[Object-oriented programming]] (OOP) in which inheritance occurs via defining ''[[Class (computer programming)|classes]]'' of [[Object (computer science)|objects]], instead of inheritance occurring via the objects alone (compare [[prototype-based programming]]).
*'''[[Client (computing)|Client]]''' – is a piece of [[computer hardware]] or [[software]] that accesses a service made available by a [[Server (computing)|server]]. The server is often (but not always) on another [[computer system]], in which case the client accesses the service by way of a [[Computer network|network]].<ref>Sadoski, Darleen. 
*'''[[Cleanroom software engineering]]''' – is a [[software development process]] intended to produce software with a certifiable level of [[Reliability engineering|reliability]]. The cleanroom process was originally developed by [[Harlan Mills]] and several of his colleagues including Alan Hevner at [[IBM]].<ref>{{cite journal|last=Mills|first=H.|authorlink=Harlan Mills |author2=M. Dyer |author3=R. Linger|title=Cleanroom Software Engineering|journal=IEEE Software|volume=4|issue=5|date=September 1987|pages=19&ndash;25|doi=10.1109/MS.1987.231413|citeseerx=10.1.1.467.2435}}</ref> The focus of the cleanroom process is on defect prevention, rather than defect removal.
*'''[[Closure (computer programming)|Closure]]''' – In [[programming language]]s, a '''closure''' (also '''lexical closure''' or '''function closure''') is a technique for implementing [[lexically scoped]] [[name binding]] in a language with [[first-class function]]s. [[Operational semantics|Operationally]], a closure is a [[record (computer science)|record]] storing a [[function (computer science)|function]]{{efn|The function may be stored as a [[reference (computer science)|reference]] to a function, such as a [[function pointer]].}} together with an environment.<ref>Sussman and Steele. "Scheme: An interpreter for extended lambda calculus". "... a data structure containing a lambda expression, and an environment to be used when that lambda expression is applied to arguments." ([[s:Page:Scheme - An interpreter for extended lambda calculus.djvu/22|Wikisource]])</ref>
*'''[[Cloud computing]]''' – is shared pools of configurable computer [[system resource]]s and higher-level services that can be rapidly [[Provisioning|provisioned]] with minimal management effort, often over the [[Internet]].  Cloud computing relies on sharing of resources to achieve coherence and [[economies of scale]], similar to a [[public utility]].
*'''[[Library (computing)|Code library]]''' – is a collection of [[non-volatile memory|non-volatile resources]] used by [[computer program]]s, often for [[software development]]. These may include configuration data, documentation, help data, message templates, [[Code reuse|pre-written code]] and [[subroutine]]s, [[Class (computer science)|classes]], [[Value (computer science)|values]] or [[Data type|type]] specifications. In [[OS/360 and successors|IBM's OS/360 and its successors]] they are referred to as [[Partitioned dataset|partitioned data sets]].
*'''[[Computer programming|Coding]]''' – Computer programming is the process of designing and building an [[executable]] [[computer program]] for accomplishing a specific [[computing]] task. Programming involves tasks such as analysis, generating [[algorithm]]s, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms in a chosen [[programming language]] (commonly referred to as '''coding'''<ref name="tumblr2014">{{cite web|url=http://yearofcodes.tumblr.com/what-is-coding|title=What is coding|author=Shaun Bebbington|year=2014|accessdate=2014-03-03}}</ref><ref name="tumblr1">{{cite web|url=http://yearofcodes.tumblr.com/what-is-programming|title=What is programming|author=Shaun Bebbington|year=2014|accessdate=2014-03-03}}</ref>). The [[source code]] of a program is written in one or more programming languages. The purpose of programming is to find a sequence of instructions that will automate the performance of a task for solving a given problem. The process of programming thus often requires expertise in several different subjects, including knowledge of the [[Domain (software engineering)|application domain]], specialized algorithms, and formal [[logic]].
*'''[[Coding theory]]''' – is the study of the properties of [[code]]s and their respective fitness for specific applications. Codes are used for [[data compression]], [[cryptography]], [[error detection and correction]], [[data transmission]] and [[data storage]]. Codes are studied by various scientific disciplines—such as [[information theory]], [[electrical engineering]],  [[mathematics]], [[linguistics]], and [[computer science]]—for the purpose of designing efficient and reliable data transmission methods. This typically involves the removal of redundancy and the correction or detection of errors in the transmitted data.
*'''[[Cognitive science]]''' – is the interdisciplinary, [[science|scientific]] study of the [[mind]] and its processes.<ref>Cognitive science is an interdisciplinary field of researchers from Linguistics, psychology, neuroscience, philosophy, computer science, and anthropology that seek to understand the mind. [http://www.aft.org/newspubs/periodicals/ae/summer2002/willingham.cfm How We Learn: Ask the Cognitive Scientist]</ref>  It examines the nature, the tasks, and the functions of [[cognition]] (in a broad sense). Cognitive scientists study intelligence and behavior, with a focus on how nervous systems represent, process, and transform [[information]]. Mental faculties of concern to cognitive scientists include [[language]], [[perception]], [[memory]], [[attention]], [[reasoning]], and [[emotion]]; to understand these faculties, cognitive scientists borrow from fields such as [[linguistics]], [[psychology]], [[artificial intelligence]], [[philosophy of mind|philosophy]], [[neuroscience]], and [[anthropology]].<ref name="stanford1">[[Thagard, Paul]], [http://plato.stanford.edu/archives/fall2008/entries/cognitive-science/ Cognitive Science], ''[[The Stanford Encyclopedia of Philosophy]]'' (Fall 2008 Edition), [[Edward N. Zalta]] (ed.).</ref> 
*'''[[Comma-separated values]]''' –  ('''CSV''') [[computer file|file]] is a delimited [[text file]] that uses a comma to separate values. A CSV file stores [[Table (information)|tabular]] data (numbers and text) in [[plain text]].  Each line of the file is a data [[record (computer science)|record]].  Each record consists of one or more [[field (computer science)|fields]], separated by [[comma]]s. The use of the comma as a field separator is the source of the name for this [[file format]].
*'''[[Compiler]]''' – is a [[computer program]] that transforms computer code written in one [[programming language]] (the source language) into another programming language (the target language). Compilers are a type of [[Translator (computing)|translator]] that support digital devices, primarily computers. The name ''compiler'' is primarily used for programs that translate [[source code]] from a [[high-level programming language]] to a [[lower level language]] (e.g., [[assembly language]], [[object code]], or [[machine code]]) to create an [[executable]] program.<ref>{{cite web| author = PC Mag Staff | date = 28 February 2017 | title = Encyclopedia: Definition of Compiler | work = PCMag.com | url=https://www.pcmag.com/encyclopedia/term/40105 | accessdate=28 February 2017}}</ref>
*'''[[Compiler theory]]''' –
*'''[[Computability theory]]''' – also known as '''recursion theory''', is a branch of [[mathematical logic]], of [[computer science]], and of the [[theory of computation]] that originated in the 1930s with the study of [[computable function]]s and [[Turing degree]]s. The field has since expanded to include the study of generalized computability and definability. In these areas, recursion theory overlaps with [[proof theory]] and [[effective descriptive set theory]].
*'''[[Computation]]''' – is any type of [[calculation]]<ref>[http://www.merriam-webster.com/dictionary/computation Computation] from the Free Merriam-Webster Dictionary</ref><ref>{{cite web|title=Computation: Definition and Synonyms from Answers.com|url=http://www.answers.com:80/topic/computation|website=Answers.com|accessdate=26 April 2017|archiveurl=https://web.archive.org/web/20090222005439/http://www.answers.com/topic/computation|archivedate=22 February 2009|url-status=dead}}</ref> that includes both arithmetical and non-arithmetical steps and follows a well-defined [[Model (abstract)|model]], for example an [[algorithm]]. The study of computation is paramount to the discipline of [[computer science]].
*'''[[Computational biology]]''' –
*'''[[Computational chemistry]]''' – is a branch of [[chemistry]] that uses [[computer simulation]] to assist in solving chemical problems. It uses methods of [[theoretical chemistry]], incorporated into efficient [[computer program]]s, to calculate the structures and properties of [[molecule]]s and solids. 
*'''[[Computational complexity theory]]''' – focuses on classifying computational problems according to their inherent difficulty, and relating these classes to each other. A computational problem is a task solved by a computer. A computation problem is solvable by mechanical application of mathematical steps, such as an algorithm.
*'''[[Computational model]]''' – is a [[mathematical model]] in [[computational science]] that requires extensive [[computational resource]]s to study the behavior of a [[complex system]] by [[computer simulation]].<ref>{{cite book |editor-last=Melnik |editor-first=Roderick |title=Mathematical and Computational Modeling: With Applications in Natural and Social Sciences, Engineering, and the Arts |publisher=Wiley |year=2015 |isbn=978-1-118-85398-6 }}</ref>
*'''[[Computational neuroscience]]''' – (also known as '''theoretical neuroscience''' or '''mathematical neuroscience''') is a branch of&nbsp;[[neuroscience]]&nbsp;which employs mathematical models, theoretical analysis and abstractions of the brain to understand the principles that govern the&nbsp;[[Developmental neuroscience|development]],&nbsp;[[Neuroanatomy|structure]], [[Neurophysiology|physiology]]&nbsp;and&nbsp;[[Cognitive neuroscience|cognitive abilities]]&nbsp;of the&nbsp;[[nervous system]].<ref name="Trappenberg 2002">{{Cite book|title=Fundamentals of Computational Neuroscience|last=Trappenberg|first=Thomas P.|publisher=Oxford University Press Inc.|year=2002|isbn=978-0-19-851582-1|location=United States|page=1}}</ref><ref>What is computational neuroscience? Patricia S. Churchland, Christof Koch, Terrence J. Sejnowski. in Computational Neuroscience pp.46-55. Edited by Eric L. Schwartz. 1993. MIT Press {{cite web |url=http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=7195 |title=Archived copy |accessdate=2009-06-11 |url-status=dead |archiveurl=https://web.archive.org/web/20110604124206/http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=7195 |archivedate=2011-06-04 }}</ref><ref>{{cite web|url=https://mitpress.mit.edu/books/theoretical-neuroscience|title=Theoretical Neuroscience|last=Press|first=The MIT|website=The MIT Press|language=en|access-date=2018-05-24|archive-url=https://web.archive.org/web/20180531150713/http://mitpress.mit.edu/books/theoretical-neuroscience|archive-date=2018-05-31|url-status=dead}}</ref><ref>{{ cite book | author1= Gerstner, W. | author2 = Kistler, W. | author3 = Naud, R. | author4 = Paninski, L.| title = Neuronal Dynamics | publisher = Cambridge University Press | location = Cambridge, UK | year = 2014 | isbn = 9781107447615}}</ref>
*'''[[Computational physics]]''' –
*'''[[Computational science]]''' – (also '''scientific computing''' or '''scientific computation''' ('''SC''')) is a rapidly growing multidisciplinary field that uses advanced computing capabilities to understand and solve complex problems. It is an area of science which spans many disciplines, but at its core it involves the development of models and simulations to understand natural systems.
*'''[[Computational steering]]''' –
*'''[[Computer]]''' – is a device that can be instructed to carry out sequences of [[arithmetic]] or [[Boolean algebra|logical]] operations automatically via [[computer programming]]. Modern computers have the ability to follow generalized sets of operations, called ''[[Computer program|programs]].'' These programs enable computers to perform an extremely wide range of tasks.
*'''[[Computer architecture]]''' – In [[computer engineering]], '''computer architecture''' is a set of rules and methods that describe the functionality, organization, and implementation of [[computer]] systems. Some definitions of architecture define it as describing the capabilities and programming model of a computer but not a particular implementation.<ref>{{cite book|last1=Clements|first1=Alan|title=Principles of Computer Hardware|page=1|edition=Fourth|quote=Architecture describes the internal organization of a computer in an abstract way; that is, it defines the capabilities of the computer and its programming model. You can have two computers that have been constructed in different ways with different technologies but with the same architecture.}}</ref> In other definitions computer architecture involves [[instruction set architecture]] design, [[microarchitecture]] design, [[logic design]], and [[implementation]].<ref>{{cite book|last1=Hennessy|first1=John|last2=Patterson|first2=David|title=Computer Architecture: A Quantitative Approach|page=11|edition=Fifth|quote=This task has many aspects, including instruction set design, functional organization, logic design,and implementation.}}</ref>
*'''[[Computer data storage]]''' –  often called '''storage''' or '''memory''', is a technology consisting of [[computer]] components and [[Data storage device|recording media]] that are used to retain digital [[data (computing)|data]]. It is a core function and fundamental component of computers.<ref>name="Patterson">{{Cite book |title=Computer Organization and Design: The Hardware/Software Interface |last=Patterson |first=David A. |last2=Hennessy |first2=John L. |date=2005 |publisher=[[Morgan Kaufmann Publishers]] |isbn=978-1-55860-604-3 |edition=3rd |location=[[Amsterdam]] |oclc=56213091 |url-access=registration |url=https://archive.org/details/isbn_9781558606043 }}</ref>{{rp|15–16}}
*'''[[Computer ethics]]''' – is a part of [[practical philosophy]] concerned with how computing professionals should make decisions regarding professional and social conduct.<ref name=BynumVeryShort>{{cite web |url=http://www.southernct.edu/organizations/rccs/resources/research/introduction/bynum_shrt_hist.html#maner|title=A Very Short History of Computer Ethics |last= Bynum |first=Terrell Ward |publisher=Southern Connecticut Wein University|accessdate=2011-01-05|archiveurl=https://web.archive.org/web/20080418122849/http://www.southernct.edu/organizations/rccs/resources/research/introduction/bynum_shrt_hist.html|archivedate=2008-04-18}}</ref> 
*'''[[Computer graphics]]''' – are pictures and films created using computers. Usually, the term refers to computer-generated image data created with the help of specialized graphical hardware and software. It is a vast and recently developed area of computer science. 
*'''[[Computer network]]''' – or '''data network''', is a [[digital signal|digital]] [[telecommunications network]] which allows [[Node (networking)|nodes]] to share resources. In computer networks, [[computing device]]s [[data transmission|exchange data]] with each other using connections ([[data link]]s) between nodes. These data links are established over [[Networking cables|cable media]] such as wires or optic cables, or [[Wireless network|wireless media]] such as [[WiFi]].
*'''[[Computer programming]]''' – is the process of designing and building an [[executable]] [[computer program]] for accomplishing a specific [[computing]] task. Programming involves tasks such as analysis, generating [[algorithm]]s, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms in a chosen [[programming language]] (commonly referred to as '''coding'''<ref name="tumblr2014"/><ref name="tumblr1"/>). The [[source code]] of a program is written in one or more programming languages. The purpose of programming is to find a sequence of instructions that will automate the performance of a task for solving a given problem. The process of programming thus often requires expertise in several different subjects, including knowledge of the [[Domain (software engineering)|application domain]], specialized algorithms, and formal [[logic]].
*'''[[Computer science]]''' – is the theory, experimentation, and engineering that form the basis for the design and use of [[computer]]s. It involves the study of [[algorithm]]s that process, store, and communicate [[digital data|digital]] [[information]]. A [[computer scientist]] specializes in the theory of computation and the design of computational systems.<ref>{{cite web |url=http://wordnetweb.princeton.edu/perl/webwn?s=computer%20scientist |title=WordNet Search—3.1 |publisher=Wordnetweb.princeton.edu |accessdate=14 May 2012}}</ref>
*'''[[Computer scientist]]''' – is a [[person]] who has acquired the knowledge of [[computer science]], the study of the theoretical foundations of information and computation and their application.<ref>{{cite book |last1=Orsucci |first1=Franco F. |last2=Sala |first2=Nicoletta |date=2008 |title=Reflexing Interfaces: The Complex Coevolution of Information Technology Ecosystems, Information Science Reference |url= |location= |page=335 |isbn= }}</ref>
*'''[[Computer security]]''' –  '''cybersecurity'''<ref>{{Cite journal|last=Schatz|first=Daniel|last2=Bashroush|first2=Rabih|last3=Wall|first3=Julie|date=2017|title=Towards a More Representative Definition of Cyber Security|url=https://commons.erau.edu/jdfsl/vol12/iss2/8/|journal=Journal of Digital Forensics, Security and Law|language=en|volume=12|issue=2|pages=|issn=1558-7215|via=}}</ref> or '''information technology security''' ('''IT security''') is the protection of [[computer system]]s from theft or damage to their [[computer hardware|hardware]], [[software]] or [[Data (computing)|electronic data]], as well as from [[denial-of-service attack|disruption]] or [[botnet|misdirection]] of the services they provide.
*'''[[Computer vision]]''' –is an [[Interdisciplinarity|interdisciplinary scientific field]] that deals with how computers can be made to gain high-level understanding from [[digital image]]s or [[video]]s. From the perspective of [[engineering]], it seeks to automate tasks that the [[human visual system]] can do.<ref>Dana H. Ballard; Christopher M. Brown (1982). Computer Vision. Prentice Hall. {{ISBN|0-13-165316-4}}.</ref><ref>Huang, T. (1996-11-19). Vandoni, Carlo, E, ed. Computer Vision : Evolution And Promise (PDF). 19th CERN School of Computing. Geneva: CERN. pp. 21–25. doi:10.5170/CERN-1996-008.21. {{ISBN|978-9290830955}}.</ref><ref>Milan Sonka; Vaclav Hlavac; Roger Boyle (2008). Image Processing, Analysis, and Machine Vision. Thomson. {{ISBN|0-495-08252-X}}.</ref>
*'''[[Concatenation]]''' –
*'''[[Concurrency (computer science)|Concurrency]]''' – refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome.  This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems. In more technical terms, concurrency refers to the decomposability property of a program, algorithm, or problem into order-independent or partially-ordered components or units.<ref>{{cite journal|last1=Lamport|first1=Leslie|title=Time, Clocks, and the Ordering of Events in a Distributed System|journal=Communications of the ACM|volume=21|issue=7|pages=558–565|date=July 1978|url=http://research.microsoft.com/en-us/um/people/lamport/pubs/time-clocks.pdf|accessdate=4 February 2016|doi=10.1145/359545.359563|citeseerx=10.1.1.142.3682}}</ref> 
*'''[[Conditional (computer programming)|Conditional]]''' – '''Conditional statements''', '''conditional expressions''' and '''conditional constructs''' are features of a [[programming language]], which perform different computations or actions depending on whether a programmer-specified [[boolean datatype|boolean]] ''condition'' evaluates to true or false. Apart from the case of [[branch predication]], this is always achieved by selectively altering the [[control flow]] based on some condition.
*'''[[Continuation-passing style]]''' – In [[functional programming]], '''continuation-passing style''' ('''CPS''') is a style of programming in which [[control flow|control]] is passed explicitly in the form of a [[continuation]]. This is contrasted with [[direct style]], which is the usual style of programming. [[Gerald Jay Sussman]] and [[Guy L. Steele, Jr.]] coined the phrase in [[AI Memo]] 349 (1975), which sets out the first version of the [[Scheme (programming language)|Scheme]] programming language.<ref>{{cite journal|last1=Sussman|first1=Gerald Jay|last2=Steele|first2=Guy L., Jr.|author2-link=Guy L. Steele, Jr.|date=December 1975|title=Scheme: An interpreter for extended lambda calculus|journal=[[AI Memo]]|volume=349|page=19|quote=That is, in this '''continuation-passing programming style''', ''a function always "returns" its result by "sending" it to another function''. This is the key idea.|author1-link=Gerald Jay Sussman|title-link=wikisource:Scheme: An interpreter for extended lambda calculus}}</ref><ref>{{cite journal|last1=Sussman|first1=Gerald Jay|last2=Steele|first2=Guy L., Jr.|author2-link=Guy L. Steele, Jr.|date=December 1998|title=Scheme: A Interpreter for Extended Lambda Calculus|url=http://www.brics.dk/~hosc/local/HOSC-11-4-pp405-439.pdf|format=reprint|journal=Higher-Order and Symbolic Computation|volume=11|issue=4|pages=405–439|doi=10.1023/A:1010035624696|quote=We believe that this was the first occurrence of the term "'''continuation-passing style'''" in the literature. It has turned out to be an important concept in source code analysis and transformation for compilers and other metaprogramming tools. It has also inspired a set of other "styles" of program expression.|author1-link=Gerald Jay Sussman}}</ref>
*'''[[Control flow]]''' – (or '''flow of control''') is the order in which individual [[Statement (computer science)|statements]], [[Instruction (computer science)|instructions]] or [[function call]]s of an [[imperative programming|imperative]] [[computer program|program]] are [[Execution (computing)|executed]] or evaluated. The emphasis on explicit control flow distinguishes an ''[[imperative programming]]'' language from a ''[[declarative programming]]'' language.
*'''[[Creative Commons]]''' – (CC), is an American [[non-profit organization]] devoted to expanding the range of [[creativity|creative]] works available for others to build upon legally and to share.<ref>{{cite web |url=https://creativecommons.org/faq/|title=Frequently Asked Questions |publisher=Creative Commons |date=4 August 2016|accessdate=20 December 2011}}</ref> The organization has released several [[copyright]]-[[license]]s, known as [[Creative Commons license]]s, free of charge to the public.
*'''[[Cryptography]]''' –
*'''[[Comma-separated values|CSV]]''' – comma-separated values.
*'''[[Cyberbullying]]''' – or cyberharassment, is a form of [[bullying]] or [[harassment]] using electronic means. Cyberbullying and cyberharassment are also known as online bullying.
*'''[[Cyberspace]]''' – is widespread,  interconnected digital [[technology]].
*'''[[Data center]]''' –  or '''data centre''', is a dedicated space used to house [[Computer|computer systems]] and associated components, such as [[telecommunication]]s and [[computer data storage|storage systems]]. It generally includes [[Redundancy (engineering)|redundant]] or backup components and infrastructure for [[power supply]], data communications connections, environmental controls (e.g. air conditioning, fire suppression) and various security devices.<ref name=NYT92212>{{cite news|title=Power, Pollution and the Internet|url=https://www.nytimes.com/2012/09/23/technology/data-centers-waste-vast-amounts-of-energy-belying-industry-image.html|accessdate=2012-09-25|newspaper=The New York Times|date=September 22, 2012|author=James Glanz}}</ref><ref name="ReferenceDC2">{{cite journal|url=https://www.academia.edu/6982393|title=Power Management Techniques for Data Centers: A Survey|first=Mittal|last=Sparsh}}</ref>
*'''[[Database]]''' – is an organized collection of [[Data (computing)|data]], generally stored and accessed electronically from a computer system.  Where databases are more complex they are often developed using formal [[#Design and modeling|design and modeling]] techniques.
*'''[[Data mining]]''' –
*'''[[Data science]]''' – is an [[interdisciplinary]] field that uses scientific methods, processes, algorithms and systems to extract [[knowledge]] and insights from [[data]] in various forms, both structured and unstructured,<ref>{{Cite journal | last1 = Dhar | first1 = V. | title = Data science and prediction | doi = 10.1145/2500499 | journal = Communications of the ACM | volume = 56 | issue = 12 | pages = 64–73 | year = 2013 | pmid =  | pmc = | url = http://cacm.acm.org/magazines/2013/12/169933-data-science-and-prediction/fulltext}}</ref><ref>{{cite web | url=http://simplystatistics.org/2013/12/12/the-key-word-in-data-science-is-not-data-it-is-science/ | title=The key word in "Data Science" is not Data, it is Science | publisher=Simply Statistics | date=2013-12-12 | author=Jeff Leek | author-link=Jeffrey T. Leek }}</ref> similar to [[data mining]]. Data science is a "concept to unify statistics, data analysis, machine learning and their related methods" in order to "understand and analyze actual phenomena" with data.<ref name="Hayashi">{{Cite book|chapter-url=https://www.springer.com/book/9784431702085|title=Data Science, Classification, and Related Methods|last=Hayashi|first=Chikio|date=1998-01-01|publisher=Springer Japan|isbn=9784431702085|editor-last=Hayashi|editor-first=Chikio|series=Studies in Classification, Data Analysis, and Knowledge Organization|location=|pages=40–51|language=en|chapter=What is Data Science? Fundamental Concepts and a Heuristic Example|doi=10.1007/978-4-431-65950-1_3|editor-last2=Yajima|editor-first2=Keiji|editor-last3=Bock|editor-first3=Hans-Hermann|editor-last4=Ohsumi|editor-first4=Noboru|editor-last5=Tanaka|editor-first5=Yutaka|editor-last6=Baba|editor-first6=Yasumasa}}</ref> It employs techniques and theories drawn from many fields within the context of [[mathematics]], [[statistics]], [[information science]], and [[computer science]].
*'''[[Data structure]]''' – is a data organization, management and storage format that enables [[Algorithmic efficiency|efficient]] access and modification.<ref>{{Cite book|url=https://dl.acm.org/citation.cfm?id=1614191|title=Introduction to Algorithms, Third Edition|last=Cormen|first=Thomas H.|last2=Leiserson|first2=Charles E.|last3=Rivest|first3=Ronald L.|last4=Stein|first4=Clifford|date=2009|publisher=The MIT Press|isbn=978-0262033848|edition=3rd}}</ref><ref>{{cite book |last1=Black |first1=Paul E. |editor1-last=Pieterse |editor1-first=Vreda |editor2-last=Black |editor2-first=Paul E. |title=Dictionary of Algorithms and Data Structures [online] |date=15 December 2004 |publisher=[[National Institute of Standards and Technology]] |chapter-url=https://xlinux.nist.gov/dads/HTML/datastructur.html |accessdate=2018-11-06 |chapter=data structure}}</ref><ref>{{cite encyclopedia |encyclopedia=Encyclopaedia Britannica |title= Data structure |url=https://www.britannica.com/technology/data-structure |access-date=2018-11-06 |edition= |date=17 April 2017}}</ref> More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.<ref>{{Cite book|url=http://dl.acm.org/citation.cfm?id=1074100.1074312|title=Encyclopedia of Computer Science|last=Wegner|first=Peter|last2=Reilly|first2=Edwin D.|publisher=John Wiley and Sons |isbn=978-0470864128|location=Chichester, UK|pages=507–512|date=2003-08-29}}</ref>
*'''[[Data type]]''' – or simply '''type''' is an attribute of [[data]] which tells the [[compiler]] or [[Interpreter (computing)|interpreter]] how the programmer intends to use the data. Most programming languages support common data types of [[Real number|real]], [[integer (computer science)|integer]] and [[boolean data type|boolean]]. A data type constrains the values that an [[Expression (computer science)|expression]], such as a variable or a function, might take. This data type defines the operations that can be done on the data, the meaning of the data, and the way values of that type can be stored. A type of value from which an expression may take its value.<ref>{{FOLDOC|type|new=yes}}</ref><ref>{{cite book |last=Shaffer |first=C. A. |title=Data Structures & Algorithm Analysis in C++ |location=Mineola, NY |publisher=Dover |edition=3rd |year=2011 |at=1.2 |isbn=978-0-486-48582-9 }}</ref>
*'''[[Debugging]]''' – is the process of finding and resolving defects or problems within a computer program that prevent correct operation of [[computer software]] or a [[system]]. Debugging tactics can involve [[interactive]] debugging, [[control flow]] analysis, [[unit testing]], [[integration testing]], [[Logfile|log file analysis]], monitoring at the [[Application monitoring|application]] or [[system monitoring|system]] level, [[memory dump]]s, and [[Profiling (computer programming)|profiling]].
*'''[[Declaration (computer programming)|Declaration]]''' – In [[computer programming]], a '''declaration''' is a [[language construct]] that specifies properties of an [[Identifier (computer programming)|identifier]]: it declares what a word (identifier) "means".<ref name="c11">"A declaration specifies the interpretation and attributes of a set of identifiers. A ''definition'' of an identifier is a declaration for that identifier that:
*'''[[Digital data]]''' – in [[information theory]] and [[information systems]], is the discrete, discontinuous [[Representation (mathematics)|representation]] of information or works. [[Number]]s and [[Letter (alphabet)|letters]] are commonly used representations.
*'''[[Digital signal processing]]''' – ('''DSP''') is the use of [[digital processing]], such as by computers or more specialized [[digital signal processor]]s, to perform a wide variety of [[signal processing]] operations.  The signals processed in this manner are a sequence of numbers that represent [[Sampling (signal processing)|samples]] of a [[continuous variable]] in a domain such as time, space, or frequency.
*'''[[Discrete event simulation]]''' – ('''DES''') models the operation of a [[system]] as a [[discrete time|discrete]] [[sequence of events]] in time. Each event occurs at a particular instant in time and marks a change of [[State (computer science)|state]] in the system.<ref>{{cite book|title=Simulation – The practice of model development and use|author=Stewart Robinson|publisher=Wiley|year=2004}}</ref> Between consecutive events, no change in the system is assumed to occur; thus the [[simulation]] can directly jump in time from one event to the next.
*'''[[Disk storage]]''' –
*'''[[Distributed computing]]''' – is a field of [[computer science]] that studies distributed systems. A ''distributed system'' is a system whose components are located on different [[computer network|networked computers]], which communicate and coordinate their actions by [[message passing|passing messages]] to one another.<ref name="Coulouris">{{cite book|last=Coulouris|first=George|author2=Jean Dollimore|authorlink2=Jean Dollimore|author3=Tim Kindberg|author4=Gordon Blair|title=Distributed Systems: Concepts and Design (5th Edition)|publisher = Addison-Wesley|year=2011|location=Boston|isbn=978-0-132-14301-1}}</ref> The components interact with one another in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components, [[clock synchronization|lack of a global clock]], and independent failure of components.<ref name="Coulouris" /> Examples of distributed systems vary from [[service-oriented architecture|SOA-based systems]] to [[massively multiplayer online game]]s to [[peer-to-peer|peer-to-peer applications]].
*'''[[Divide and conquer algorithm]]''' – is an [[algorithm design paradigm]] based on multi-branched [[recursion]]. A divide-and-conquer [[algorithm]] works by recursively breaking down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.
*'''[[Domain Name System|DNS]]''' – see '''''Domain Name System'''''.
*'''[[Software documentation|Documentation]]''' – '''Software documentation''' is written text or illustration that accompanies [[computer software]] or is embedded in the source code.  It either explains how it operates or how to use it, and may mean different things to people in different roles.
*'''[[Domain Name System]]''' –  ('''DNS''') is a [[hierarchy|hierarchical]] and [[Decentralised system|decentralized]] naming system for computers, services, or other resources connected to the [[Internet]] or a private network. It associates various information with [[domain name]]s assigned to each of the participating entities. Most prominently, it translates more readily memorized domain names to the numerical [[IP address]]es needed for locating and identifying computer services and devices with the underlying [[communication protocol|network protocol]]s. By providing a worldwide, [[Distributed computing|distributed]] [[directory service]], the Domain Name System has been an essential component of the functionality of the Internet since 1985.
*'''[[Double-precision floating-point format]]''' –  is a [[computer number format]]. It represents a wide [[dynamic range]] of numeric values by using a floating radix point.
*'''[[Download]]''' – In [[computer network]]s, '''download''' means to receive data from a remote system, typically a [[Server (computing)|server]]<ref name="main">{{cite web|url=http://searchnetworking.techtarget.com/definition/downloading|title=What is downloading? - Definition from WhatIs.com|work=SearchNetworkNexting|access-date=2019-03-04|archive-url=https://web.archive.org/web/20190905142601/https://searchnetworking.techtarget.com/definition/downloading|archive-date=2019-09-05|url-status=dead}}</ref> such as a [[web server]], an [[File Transfer Protocol|FTP]] server, an [[email]] server, or other similar systems. This contrasts with [[upload]]ing, where data is sent ''to'' a remote server. A ''download'' is a [[computer file|file]] offered for downloading or that has been downloaded, or the process of receiving such a file.
*'''[[Edge device]]''' – is a device which provides an entry point into enterprise or service provider core networks. Examples include [[router (computing)|router]]s, routing [[network switch|switch]]es, [[integrated access device]]s (IADs), multiplexers, and a variety of [[metropolitan area network]] (MAN) and [[wide area network]] (WAN) access devices.  Edge devices also provide connections into carrier and service provider networks. An edge device that connects a [[local area network]] to a high speed switch or backbone (such as an ATM switch) may be called an edge concentrator.
*'''[[Encryption]]''' –
*'''[[Event (computing)|Event]]''' –  Is an action or occurrence recognized by software, often originating [[asynchronous I/O|asynchronously]] from the external environment, that may be [[Event handler|handled]] by the software. Because an event is an entity which encapsulates the action and the contextual variables triggering the action we can use the [[acrostic]] [[mnemonic]] of an event as an "'''E'''xecution '''V'''ariable '''E'''ncapsulating '''N'''amed '''T'''rigger" to clarify the concept.
*'''[[Event-driven programming]]''' – is a [[programming paradigm]] in which the [[Control flow|flow of the program]] is determined by [[event (computing)|event]]s such as user actions ([[computer mouse|mouse]] clicks, key presses), [[sensor]] outputs, or [[message passing|messages]] from other programs or [[thread (computer science)|threads]]. Event-driven programming is the dominant paradigm used in [[graphical user interface]]s and other applications (e.g., JavaScript [[web application]]s) that are centered on performing certain actions in response to [[input/output|user input]]. This is also true of programming for [[device driver]]s (e.g., [[P (programming language)|P]] in USB device driver stacks<ref>{{cite web |url=https://www.microsoft.com/en-us/research/publication/p-safe-asynchronous-event-driven-programming/ |title=P: Safe Asynchronous Event-Driven Programming |author=Vivek Gupta |author2=Ethan Jackson |author3=Shaz Qadeer |author4=Sriram Rajamani |accessdate=20 February 2017}}</ref>).
*'''[[Evolutionary computing]]''' – is a family of [[algorithm]]s for [[global optimization]] inspired by [[biological evolution]], and the subfield of [[artificial intelligence]] and [[soft computing]] studying these algorithms. In technical terms, they are a family of population-based [[trial and error]] problem solvers with a [[metaheuristic]] or [[stochastic optimization]] character.
*'''[[Executable]]''' – '''executable code''' or an '''executable file''' or '''executable program''', sometimes simply referred to as an  '''executable''', causes a computer "to perform indicated tasks according to encoded [[instruction (computer science)|instructions]],"<ref>{{cite web |url=http://www.merriam-webster.com/dictionary/executable |title=executable |accessdate=2008-07-19 |work=Merriam-Webster's Online Dictionary |publisher=[[Merriam-Webster]]}}</ref> as opposed to a [[Data (computing)|data file]] that must be [[parser|parsed]] by a program to be meaningful. The exact interpretation depends upon the use - while "instructions" is traditionally taken to mean [[machine code]] instructions for a physical [[Central processing unit|CPU]], in some contexts a file containing [[bytecode]] or [[scripting language]] instructions may also be considered executable.
*'''[[Exception handling]]''' – is the process of responding to the occurrence, during [[computation]], of ''exceptions'' – anomalous or exceptional conditions requiring special processing – often disrupting the normal flow of [[computer program|program]] [[execution (computing)|execution]]. It is provided by specialized [[programming language]] constructs, [[computer hardware]] mechanisms like [[interrupt]]s or [[operating system]] [[inter-process communication|IPC]] facilities like [[Signal (IPC)|signals]].
*'''[[Expression (computer science)|Expression]]''' – An expression in a [[programming language]] is a combination of one or more [[Constant (programming)|constants]], [[variable (programming)|variable]]s, [[operator (programming)|operator]]s, and [[function (programming)|function]]s that the programming language interprets (according to its particular [[Order of operations|rules of precedence]] and of association) and computes to produce ("to return", in a [[state (computer science)|stateful]] environment) another value. This process, as for [[mathematical expression]]s, is called evaluation. 
*'''[[Fault-tolerant computer system]]''' – are systems designed around the concepts of [[fault tolerance]]. In essence, they must be able to continue working to a level of satisfaction in the presence of errors or breakdowns.
*'''[[Feasibility study]]''' – aims to objectively and rationally uncover the strengths and weaknesses of an existing business or proposed venture, opportunities and threats present in the [[natural environment]], the [[resources]] required to carry through, and ultimately the prospects for success.<ref name="Justis">Justis, R. T. & Kreigsmann, B. (1979). The feasibility study as a tool for venture analysis. ''Business Journal of Small Business Management'' 17 (1) 35-42.</ref><ref>Georgakellos, D. A. & Marcis, A. M. (2009). Application of the semantic learning approach in the feasibility studies preparation training process. ''Information Systems Management'' 26 (3) 231-240.</ref> In its simplest terms, the two criteria to judge feasibility are [[cost]] required and [[value (economics)|value]] to be attained.<ref>Young, G. I. M. (1970). Feasibility studies. ''Appraisal Journal'' 38 (3) 376-383.</ref>
*'''[[Filename extension]]''' – is an identifier specified as a [[substring|suffix]] to the [[filename|name]] of a [[computer file]]. The extension indicates a characteristic of the file contents or its intended use. 
*'''[[Filter (software)]]''' – is a [[computer program]] or [[subroutine]] to process a [[Stream (computing)|stream]], producing another stream. While a single filter can be used individually, they are frequently strung together to form a [[Pipeline (software)|pipeline]].
*'''[[Floating point arithmetic]]''' –
*'''[[For loop]]''' – A for-loop (or simply for loop)  is a [[control flow]] [[statement (programming)|statement]] for specifying [[iteration]], which allows code to be [[execution (computers)|executed]] repeatedly. Various keywords are used to specify this statement: descendants of [[ALGOL]] use "for", while descendants of [[Fortran]] use "do". There are other possibilities, for example [[COBOL]] which uses "PERFORM VARYING".
*'''[[Formal methods]]''' – are a particular kind of [[mathematically]] based technique for the [[formal specification|specification]], development and [[formal verification|verification]] of [[software]] and [[computer hardware|hardware]] systems.<ref name="butler">{{cite web|author=R. W. Butler|title=What is Formal Methods?|url=http://shemesh.larc.nasa.gov/fm/fm-what.html|date=2001-08-06|accessdate=2006-11-16}}</ref> The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design.<ref>{{cite journal|author=C. Michael Holloway|title=Why Engineers Should Consider Formal Methods|url=http://klabs.org/richcontent/verification/holloway/nasa-97-16dasc-cmh.pdf|publisher=16th Digital Avionics Systems Conference (27–30 October 1997)|accessdate=2006-11-16|url-status=dead|archiveurl=https://web.archive.org/web/20061116210448/http://klabs.org/richcontent/verification/holloway/nasa-97-16dasc-cmh.pdf|archivedate=16 November 2006}}</ref>
*'''[[Formal verification]]''' –  is the act of [[Mathematical proof|proving]] or disproving the [[correctness (computer science)|correctness]] of intended [[algorithms]] underlying a system with respect to a certain [[formal specification]] or property, using [[formal methods]] of [[mathematics]].<ref>{{cite journal|last=Sanghavi|first=Alok|title=What is formal verification?|journal=EE Times Asia|date=May 21, 2010}}</ref>
*'''[[Functional programming]]''' – is a [[programming paradigm]]—a style of building the structure and elements of [[computer program]]s—that treats [[computation]] as the evaluation of [[function (mathematics)|mathematical functions]] and avoids changing-[[program state|state]] and [[Immutable object|mutable]] data. It is a [[declarative programming]] paradigm in that programming is done with [[Expression (computer science)|expressions]] or declarations<ref name="expression style">{{cite web|url=https://wiki.haskell.org/Declaration_vs._expression_style#Expression_style|title=Declaration vs. expression style - HaskellWiki|publisher=}}</ref> instead of [[statement (computer science)|statements]].
*'''[[Game theory]]''' – is the study of [[mathematical model]]s of strategic interaction between rational decision-makers.<ref name=Myerson>[[Roger B. Myerson|Myerson, Roger B.]] (1991). ''Game Theory: Analysis of Conflict,'' Harvard University Press, p.&nbsp;[https://books.google.com/books?id=E8WQFRCsNr0C&printsec=find&pg=PA1 1]. Chapter-preview links, pp. [https://books.google.com/books?id=E8WQFRCsNr0C&printsec=find&pg=PR7 vii–xi].</ref> It has applications in all fields of [[social science]], as well as in [[logic]] and [[computer science]]. Originally, it addressed [[zero-sum game]]s, in which each participant's gains or losses are exactly balanced by those of the other participants. Today, game theory applies to a wide range of behavioral relations, and is now an [[umbrella term]] for the [[science]] of logical decision making in humans, animals, and computers.
*'''[[Garbage in, garbage out]]''' – (GIGO), describes the concept that flawed, or nonsense [[input (computer science)|input]] data produces nonsense [[input/output|output]] or "garbage".
*'''[[GIF]]''' – Graphics Interchange Format.
*'''[[Gigabyte]]''' –  is a multiple of the unit [[byte]] for digital information. The [[SI prefix|prefix]] ''[[giga-|giga]]'' means 10<sup>9</sup> in the [[International System of Units]] (SI). Therefore, one gigabyte is {{gaps|1|000|000|000|bytes}}.  The unit symbol for the gigabyte is GB.
*'''[[Global variable]]''' – In [[computer programming]], a global variable is a variable with global [[scope (programming)|scope]], meaning that it is visible (hence accessible) throughout the program, unless [[Variable shadowing|shadowed]]. The set of all global variables is known as the ''global environment'' or ''global state.'' In compiled languages, global variables are generally [[static variable]]s, whose [[Variable (programming)#Scope and extent|extent]] (lifetime) is the entire runtime of the program, though in interpreted languages (including [[command-line interpreter]]s), global variables are generally dynamically allocated when declared, since they are not known ahead of time.
*'''[[Graph theory]]''' – In [[mathematics]], graph theory is the study of ''[[graph (discrete mathematics)|graph]]s'', which are mathematical structures used to model pairwise relations between objects. A graph in this context is made up of ''[[Vertex (graph theory)|vertices]]'' (also called ''nodes'' or ''points'') which are connected by ''[[Glossary of graph theory terms#edge|edges]]'' (also called ''links'' or ''lines''). A distinction is made between undirected graphs, where edges link two vertices symmetrically, and directed graphs, where edges link two vertices asymmetrically.
*'''[[Computational complexity theory|Hard problem]]''' – Computational complexity theory focuses on classifying computational problems according to their inherent difficulty, and relating these classes to each other. A computational problem is a task solved by a computer. A computation problem is solvable by mechanical application of mathematical steps, such as an algorithm.
*'''[[Hash function]]''' – is any [[Function (mathematics)|function]] that can be used to map [[data (computing)|data]] of arbitrary size to data of a fixed size. The values returned by a hash function are called '''hash values''', '''hash codes''', '''digests''', or simply '''hashes'''. Hash functions are often used in combination with a [[hash table]], a common [[data structure]] used in computer software for rapid data lookup. Hash functions accelerate table or database lookup by detecting duplicated records in a large file.
*'''[[Hash table]]''' – In [[computing]], a '''hash table''' ('''hash map''') is a [[data structure]] that implements an [[associative array]] [[abstract data type]], a structure that can map [[Unique key|keys]] to [[Value (computer science)|values]]. A hash table uses a [[hash function]] to compute an ''index'' into an array of ''buckets'' or ''slots'', from which the desired value can be found.
*'''[[Heap (data structure)|Heap]]''' – is a specialized [[Tree (data structure)|tree]]-based [[data structure]] which is essentially an almost complete<ref>{{Cite book|title=INTRODUCTION TO ALGORITHMS|last=CORMEN|first=THOMAS H.|publisher=The MIT Press Cambridge, Massachusetts London, England|year=2009|isbn=978-0-262-03384-8|location=United States of America|pages=151–152}}</ref> tree that satisfies the ''heap property:'' if P is a parent [[Node (computer science)|node]] of C, then the ''key'' (the ''value'') of P is either greater than or equal to (in a ''max heap'') or less than or equal to (in a ''min heap'') the key of C.<ref>Black (ed.), Paul E. (2004-12-14). Entry for ''heap'' in ''[[Dictionary of Algorithms and Data Structures]]''. Online version. U.S. [[National Institute of Standards and Technology]], 14 December 2004. Retrieved on 2017-10-08 from https://xlinux.nist.gov/dads/HTML/heap.html.</ref> The node at the "top" of the heap (with no parents) is called the ''root'' node.
*'''[[Heapsort]]''' – is a [[comparison sort|comparison-based]] [[sorting algorithm]]. Heapsort can be thought of as an improved [[selection sort]]: like that algorithm, it divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element and moving that to the sorted region. The improvement consists of the use of a [[heap (data structure)|heap]] data structure rather than a linear-time search to find the maximum.<ref>{{cite book |first=Steven |last=Skiena |authorlink=Steven Skiena |title=The Algorithm Design Manual |publisher=Springer |year=2008 |page=109 |chapter=Searching and Sorting |isbn=978-1-84800-069-8 |quote=[H]eapsort is nothing but an implementation of selection sort using the right data structure.|doi=10.1007/978-1-84800-070-4_4}}<!--DOI for chapter--></ref>
*'''[[Human-computer interaction]]''' – ('''HCI''') researches the design and use of computer technology, focused on the interfaces between people ([[user (computing)|users]]) and computers. Researchers in the field of HCI both observe the ways in which humans interact with computers and design technologies that let humans interact with computers in novel ways. As a field of research, human–computer interaction is situated at the intersection of [[computer science]], [[behavioral sciences]], [[design]], [[media studies]], and [[Outline of human–computer interaction#Related fields|several other fields of study]].
*'''[[Integrated development environment|IDE]]''' – integrated development environment.
*'''[[Image processing]]''' –
*'''[[Imperative programming]]''' – is a  [[programming paradigm]] that uses [[Statement (computer science)|statement]]s that change a program's [[state (computer science)|state]]. In much the same way that the [[imperative mood]] in [[natural language]]s expresses commands, an imperative program consists of [[command (computing)|command]]s for the computer to perform. Imperative programming focuses on describing ''how'' a program operates.
*'''[[Incremental build model]]''' – is a method of [[software development]] where the product is [[software design|designed]], implemented and [[software testing|tested]] incrementally (a little more is added each time) until the product is finished. It involves both development and maintenance. The product is defined as finished when it satisfies all of its requirements. This model combines the elements of the [[waterfall model]] with the iterative philosophy of [[software prototyping|prototyping]].
*'''[[Information space analysis]]''' – is a [[deterministic]] method, enhanced by [[Artificial intelligence|machine intelligence]], for locating and assessing [[resource]]s for team-centric efforts.
*'''[[Information visualization]]''' –
*'''[[Inheritance (computer science)|Inheritance]]''' – In [[object-oriented programming]], inheritance is the mechanism of basing an [[Object (computer science)|object]] or [[Class (computer programming)|class]] upon another object ([[Prototype-based programming|prototype-based inheritance]]) or class ([[Class-based programming|class-based inheritance]]), retaining similar implementation. Also defined as deriving new classes ([[#Subclasses and superclasses|sub classes]]) from existing ones (super class or [[Fragile base class|base class]]) and forming them into a hierarchy of classes.
*'''[[Input/output]]''' – or I/O (or, informally, io or IO), is the communication between an [[information processing system]], such as a [[computer]], and the outside world, possibly a human or another [[Information processor|information processing system]]. [[Information|Inputs]] are the signals or data received by the system and outputs are the signals or [[Data (computing)|data]] sent from it. The term can also be used as part of an action; to "perform I/O" is to perform an [[I/O scheduling|input or output operation]].
*'''[[Insertion sort]]''' – is a simple [[sorting algorithm]] that builds the final [[sorted array]] (or list) one item at a time.
*'''[[Instruction cycle]]''' – (also known as the fetch–decode–execute cycle or simply the fetch-execute cycle), is the cycle which the [[central processing unit]] (CPU) follows from [[booting|boot-up]] until the computer has shut down in order to process instructions. It is composed of three main stages: the fetch stage, the decode stage, and the execute stage.
*'''[[Integer (computer science)|Integer]]''' – is a [[data|datum]] of integral data type, a [[data type]] that represents some [[interval (mathematics)|range]] of mathematical [[integer]]s. Integral data types may be of different sizes and may or may not be allowed to contain negative values. Integers are commonly represented in a computer as a group of binary digits (bits). The size of the grouping varies so the set of integer sizes available varies between different types of computers. Computer hardware, including [[virtual machine]]s, nearly always provide a way to represent a processor [[word size|register]] or memory address as an integer.
*'''[[Integrated development environment]]''' – (IDE), is a [[Application software|software application]] that provides comprehensive facilities to [[computer programmer]]s for [[software development]]. An IDE normally consists of at least a [[source code editor]], [[build automation]] tools, and a [[debugger]].
*'''[[Integration testing]]''' – (sometimes called integration and testing, abbreviated I&T) is the phase in [[software testing]] in which individual software modules are combined and tested as a group. Integration testing is conducted to evaluate the [[regulatory compliance|compliance]] of a system or component with specified [[functional requirement]]s.<ref>{{Cite book|title=ISO/IEC/IEEE International Standard - Systems and software engineering|last=|first=|publisher=ISO/IEC/IEEE 24765:2010(E)|year=2010|isbn=|location=|pages=vol., no., pp.1–418, 15 Dec. 2010}}</ref> It occurs after [[unit testing]] and before [[Software verification and validation|validation testing]]. Integration testing takes as its input [[module (programming)|modules]] that have been unit tested, groups them in larger aggregates, applies tests defined in an integration [[test plan]] to those aggregates, and delivers as its output the integrated system ready for [[system testing]].<ref>[https://books.google.com/books?id=utFCImZOTEIC&pg=PA73&dq=integration+test&hl=en&sa=X&ei=4EpTVOvJMayu7Aak5YCIDA&ved=0CDwQ6AEwAg#v=onepage&q=integration%20test&f=false Martyn A Ould & Charles Unwin (ed), ''Testing in Software Development'', BCS (1986), p71]. Accessed 31 Oct 2014</ref>
*'''[[Intellectual property]]''' – (IP), is a category of [[property]] that includes intangible creations of the human intellect.<ref>{{Cite web|url=https://www.wipo.int/publications/en/details.jsp?id=4080|title=Understanding Industrial Property|publisher=World Intellectual Property Organization|access-date=2018-12-06}}</ref><ref>{{Cite web|url=http://www.europarl.europa.eu/factsheets/en/sheet/36/intellectual-industrial-and-commercial-property|title=Intellectual, industrial and commercial property {{!}} Fact Sheets on the European Union|publisher=European Parliament|access-date=2018-12-06}}</ref> There are many types of intellectual property, and some countries recognize more than others.<ref>{{Cite web |url=https://www.wto.org/english/tratop_e/trips_e/intel1_e.htm |title=What are intellectual property rights? |website=World Trade Organization |publisher=World Trade Organization |access-date=2016-05-23}}</ref><ref>"Intellectual property", ''Black's Law Dictionary'', 10th ed. (2014).</ref><ref>{{Cite web|url=https://www.wipo.int/edocs/pubdocs/en/wipo_pub_909_2016.pdf|title=Understanding Copyright and Related Rights|publisher=World Intellectual Property Organization|page=4|access-date=2018-12-06}}</ref><ref>{{Cite web|url=https://www.wipo.int/edocs/pubdocs/en/intproperty/450/wipo_pub_450.pdf|title=What is Intellectual Property?|publisher=World Intellectual Property Organization (WIPO)|access-date=2018-12-07}}</ref><ref>{{Cite web|url=https://www.wipo.int/edocs/pubdocs/en/wipo_pub_895_2016.pdf|title=Understanding Industrial Property|publisher=World Intellectual Property Organization (WIPO)|access-date=2018-12-07}}</ref> The most well-known types are [[copyright]]s, [[patent]]s, [[trademark]]s, and [[trade secret]]s.
*'''[[Intelligent agent]]''' –
*'''[[Interface (computing)|Interface]]''' – is a shared boundary across which two or more separate components of a [[computer system]] exchange information. The exchange can be between [[software]], [[computer hardware]], [[peripheral]] devices, [[User interface|humans]], and combinations of these.<ref name="HookwayInterface14">{{cite book |url=https://books.google.com/books?id=BQM_AwAAQBAJ |chapter=Chapter 1: The Subject of the Interface |title=Interface |author=Hookway, B. |publisher=MIT Press |pages=1–58 |year=2014 |isbn=9780262525503}}</ref> Some computer hardware devices, such as a [[touchscreen]], can both send and receive data through the interface, while others such as a mouse or microphone may only provide an interface to send data to a given system.<ref>{{cite encyclopedia
*'''[[Internal documentation]]''' – Computer [[software]] is said to have Internal Documentation if the notes on how and why various parts of code operate is included within the [[source code]] as comments.  It is often combined with meaningful [[variable (programming)|variable]] names with the intention of providing potential future programmers a means of understanding the workings of the code. This contrasts with external [[documentation]], where programmers keep their notes and explanations in a separate document.
*'''[[Internet]]''' – The Internet ([[portmanteau]] of interconnected network) is the global system of interconnected [[computer network]]s that use the [[Internet protocol suite]] (TCP/IP) to link devices worldwide. It is a ''network of networks'' that consists of private, public, academic, business, and government networks of local to global scope, linked by a broad array of electronic, wireless, and optical networking technologies.
*'''[[Internet bot]]''' – also known as a [[World Wide Web|web]] robot, robot or simply bot, is a [[software application]] that runs automated tasks (scripts) over the [[Internet]].<ref>{{cite book |url=https://archive.org/details/malicio_dun_2009_00_4004 |url-access=registration |title=Malicious Bots: An Inside Look into the Cyber-Criminal Underground of the Internet |last=Dunham |first=Ken |last2=Melnick |first2=Jim |publisher=CRC Press |year=2008 |isbn=9781420069068 |location= |pages= }}</ref> Typically, bots perform tasks that are both simple and structurally repetitive, at a much higher rate than would be possible for a human alone. The largest use of bots is in [[web crawler|web spidering]] (''web crawler''), in which an automated script fetches, analyzes and files information from web servers at many times the speed of a [[human]].
*'''[[Interpreter (computing)|Interpreter]]''' – is a [[computer program]] that directly [[execution (computers)|executes]] instructions written in a [[Programming language|programming]] or [[scripting language]], without requiring them previously to have been [[Compiler|compiled]] into a [[machine language]] program.
*'''[[Invariant (computer science)|Invariant]]''' –
*'''[[Iteration]]''' –
*'''[[Java (programming language)|Java]]''' – is a [[General-purpose language|general-purpose]] [[programming language]] that is [[class-based programming|class-based]], [[object-oriented programming|object-oriented]]{{sfn|DECODER|p=1}}(although not a ''pure'' OO language<ref>{{cite web|url=https://stackoverflow.com/questions/12836522/java-is-pure-object-oriented-or-not|title=Java is pure object oriented or not?|website=Stack Overflow|access-date=2019-05-24}}</ref>), and designed to have as few implementation [[Dependency (computer science)|dependencies]] as possible. It is intended to let [[application developer]]s "[[write once, run anywhere]]" (WORA),<ref>{{cite web|url=http://www.computerweekly.com/Articles/2002/05/02/186793/write-once-run-anywhere.htm|title=Write once, run anywhere?|date=May 2, 2002|publisher=[[Computer Weekly]]|accessdate=2009-07-27}}</ref> meaning that [[compiler|compiled]] Java code can run on all platforms that support Java without the need for recompilation.<ref name="design_goals">{{cite web|url=https://www.oracle.com/technetwork/java/intro-141325.html|title=1.2 Design Goals of the Java™ Programming Language|publisher=Oracle|date=January 1, 1999|accessdate=2013-01-14|archive-url=https://web.archive.org/web/20130123204103/http://www.oracle.com/technetwork/java/intro-141325.html|archive-date=January 23, 2013|url-status=live|df=mdy-all}}</ref>
*'''[[Kernel (operating system)|Kernel]]''' – When referring to an [[operating system]], the kernel is the first section of the [[operating system]] to load into [[memory]]. As the center of the [[operating system]], the kernel needs to be small, efficient and loaded into a protected area in the memory so as not to be overwritten. It can be responsible for such things as disk drive management, file management, memory management, process management, etc.
*'''[[Library (computing)]]''' – is a collection of [[non-volatile memory|non-volatile]] resources used by [[computer program]]s, often for [[software development]]. These may include configuration data, documentation, help data, message templates, [[Code reuse|pre-written code]] and [[subroutine]]s, [[Class (computer science)|classes]], [[Value (computer science)|values]] or [[Data type|type]] specifications.
*'''[[Linear search]]''' – or sequential search, is a method for finding an element within a [[list (computing)|list]]. It sequentially checks each element of the list until a match is found or the whole list has been searched.{{Sfn|Knuth|1998|loc=§6.1 ("Sequential search")}}
*'''[[Linked list]]''' – is a linear collection of data elements, whose order is not given by their physical placement in memory. Instead, each element [[pointer (computer programming)|points]] to the next. It is a [[data structure]] consisting of a collection of [[node (computer science)|node]]s which together represent a [[sequence]].
*'''[[Linker (computing)|Linker]]''' –  or link editor, is a computer [[System utility|utility]] program that takes one or more [[object file]]s generated by a [[compiler]] or an [[assembler (computing)|assembler]] and combines them into a single [[executable]] file, [[Library (computing)|library]] file, or another 'object' file.  A simpler version that writes its output directly to memory is called the ''loader'', though [[loader (computing)|loading]] is typically considered a separate process.<ref>{{cite book |last=IBM Corporation |title=IBM OS Linkage Editor and Loader |year=1972 |url= http://bitsavers.informatik.uni-stuttgart.de/pdf/ibm/360/os/R21.0_Mar72/GC28-6538-9_OS_Linkage_Editor_and_Loader_Release_21_Jan72.pdf}}</ref>
*'''[[List (abstract data type)|List]]''' – or sequence, is an [[abstract data type]] that represents a countable number of ordered [[value (computer science)|values]], where the same value may occur more than once. An instance of a list is a computer representation of the [[mathematics|mathematical]] concept of a finite [[sequence (mathematics)|sequence]]; the (potentially) infinite analog of a list is a [[Stream (computing)|stream]].<ref>{{cite book |title=Structure and Interpretation of Computer Programs |first1=Harold |last1=Abelson |first2=Gerald Jay |last2=Sussman |year=1996 |publisher=MIT Press|title-link=Structure and Interpretation of Computer Programs }}</ref>{{rp|§3.5}} Lists are a basic example of [[Container (abstract data type)|containers]], as they contain other values. If the same value occurs multiple times, each occurrence is considered a distinct item.
*'''[[Loader (computing)|Loader]]''' – is the part of an [[operating system]] that is responsible for loading [[computer program|programs]] and [[Library (computing)|libraries]]. It is one of the essential stages in the process of starting a program, as it places programs into memory and prepares them for execution. Loading a program involves reading the contents of the [[executable|executable file]] containing the program instructions into memory, and then carrying out other required preparatory tasks to prepare the executable for running. Once loading is complete, the operating system starts the program by passing control to the loaded program code.
*'''[[Logic error]]''' – In [[computer programming]], a logic error  is a [[Software bug|bug]] in a program that causes it to operate incorrectly, but not to terminate abnormally (or [[crash (computing)|crash]]). A logic error produces unintended or undesired output or other behaviour, although it may not immediately be recognized as such.
*'''[[Logic programming]]''' – is a type of [[programming paradigm]] which is largely based on [[formal logic]]. Any program written in a logic [[programming language]] is a set of sentences in logical form, expressing facts and rules about some problem domain.  Major logic programming language families include [[Prolog]], [[answer set programming]] (ASP) and [[Datalog]].
*'''[[Machine learning]]''' – (ML), is the [[Branches of science|scientific study]] of [[algorithm]]s and [[statistical model]]s that [[computer systems]] use to perform a specific task without using explicit instructions, relying on patterns and [[inference]] instead. It is seen as a subset of [[artificial intelligence]]. Machine learning algorithms build a [[mathematical model]] based on sample data, known as "[[training data]]", in order to make predictions or decisions without being explicitly programmed to perform the task.{{refn|The definition "without being explicitly programmed" is often attributed to [[Arthur Samuel]], who coined the term "machine learning" in 1959, but the phrase is not found verbatim in this publication, and may be a [[paraphrase]] that appeared later. Confer "Paraphrasing Arthur Samuel (1959), the question is: How can computers learn to solve problems without being explicitly programmed?" in {{Cite conference|title=Automated Design of Both the Topology and Sizing of Analog Electrical Circuits Using Genetic Programming|conference=Artificial Intelligence in Design '96|last=Koza|first=John R.|last2=Bennett|first2=Forrest H.|last3=Andre|first3=David|last4=Keane|first4=Martin A.|date=1996|publisher=Springer, Dordrecht|pages=151–170|language=en|doi=10.1007/978-94-009-0279-4_9}}}}<ref>< Bishop, C. M. (2006), Pattern Recognition and Machine Learning, Springer, {{ISBN|978-0-387-31073-2}}</ref>
*'''[[Machine vision]]''' – (MV), is the technology and methods used to provide imaging-based automatic inspection and analysis for such applications as automatic inspection,  [[process control]], and robot guidance, usually in industry. Machine vision refers to many technologies, software and hardware products, integrated systems, actions, methods and expertise. Machine vision as a [[systems engineering]] discipline can be considered distinct from [[computer vision]], a form of [[computer science]]. It attempts to integrate existing technologies in new ways and apply them to solve real world problems. The term is the prevalent one for these functions in industrial automation environments but is also used for these functions in other environments such as security and vehicle guidance.
*'''[[Mathematical logic]]''' – is a subfield of [[mathematics]] exploring the applications of formal [[logic]] to mathematics.  It bears close connections to [[metamathematics]], the [[foundations of mathematics]], and [[theoretical computer science]].<ref>Undergraduate texts include Boolos, Burgess, and Jeffrey [[#CITEREFBoolosBurgessJeffrey2002|(2002)]], [[Herbert Enderton|Enderton]] [[#CITEREFEnderton2001|(2001)]], and Mendelson [[#CITEREFMendelson1997|(1997)]]. A classic graduate text by Shoenfield [[#CITEREFShoenfield2001|(2001)]] first appeared in 1967.</ref>  The unifying themes in mathematical logic include the study of the expressive power of [[formal system]]s and the [[Deductive reasoning|deductive]] power of formal [[Mathematical proof|proof]] systems.
*'''[[Matrix (mathematics)|Matrix]]''' – In [[mathematics]], a matrix, (plural matrices), is a [[rectangle|rectangular]] ''[[wikt:array|array]]''<ref>Equivalently, ''[[wikt:table|table]]''.</ref> (see [[irregular matrix]]) of [[number]]s, [[symbol (formal)|symbol]]s, or [[expression (mathematics)|expression]]s, arranged in ''[[wikt:row|row]]s'' and ''[[wikt:column|column]]s''.<ref>{{harvtxt|Anton|1987|p=23}}</ref><ref>{{harvtxt|Beauregard|Fraleigh|1973|p=56}}</ref>
*'''[[Computer data storage|Memory]]''' – Computer data storage, often called storage, is a technology consisting of [[computer]] components and [[Data storage device|recording media]] that are used to retain digital [[data (computing)|data]]. It is a core function and fundamental component of computers.<ref name="Patterson">{{Cite book |title=Computer Organization and Design: The Hardware/Software Interface |last=Patterson |first=David A. |last2=Hennessy |first2=John L. |date=2005 |publisher=[[Morgan Kaufmann Publishers]] |isbn=1-55860-604-1 |edition=3rd |location=[[Amsterdam]] |oclc=56213091 |url-access=registration |url=https://archive.org/details/isbn_9781558606043 }}</ref>{{rp|15–16}}
*'''[[Merge sort]]''' – (also commonly spelled mergesort), is an efficient, general-purpose, [[comparison sort|comparison-based]] [[sorting algorithm]]. Most implementations produce a [[Sorting algorithm#Stability|stable sort]], which means that the order of equal elements is the same in the input and output. Merge sort is a [[divide and conquer algorithm]] that was invented by [[John von Neumann]] in 1945.<ref>{{Harvtxt|Knuth|1998|p=158}}</ref> A detailed description and analysis of bottom-up mergesort appeared in a report by [[Herman Goldstine|Goldstine]] and [[John von Neumann|von Neumann]] as early as 1948.<ref>{{cite conference |title=A meticulous analysis of mergesort programs |date=March 1997 |first1=Jyrki |last1=Katajainen |first2=Jesper Larsson |last2=Träff |conference=Italian Conference on Algorithms and Complexity |location=Rome |book-title=Proceedings of the 3rd Italian Conference on Algorithms and Complexity |pages=217–228 |doi=10.1007/3-540-62592-5_74 |citeseerx=10.1.1.86.3154  |url=http://hjemmesider.diku.dk/~jyrki/Paper/CIAC97.pdf |ref=harv}}</ref>
*'''[[Method (computer programming)|Method]]''' – in [[object-oriented programming]] (OOP), is a [[Procedure (computer science)|procedure]] associated with a [[Message passing|message]] and an [[Object (computer science)|object]]. An object consists of data and behavior. The data and behavior comprise an interface, which specifies how the object may be utilized by any of various consumers<ref name="consumerdef001a">Consumers of an object may consist of various kinds of elements, such as other programs, remote computer systems, or computer programmers who wish to utilize the object as part of their own programs.</ref> of the object.
*'''[[Software development process|Methodology]]''' – In [[software engineering]], a software development process is the process of dividing [[software development]] work into distinct phases to improve [[Software design|design]], [[Software product management|product management]], and [[Software project management|project management]].  It is also known as a software development life cycle (SDLC).  The methodology may include the pre-definition of specific [[deliverable]]s and artifacts that are created and completed by a project team to develop or maintain an application.<ref>Centers for Medicare & Medicaid Services (CMS) Office of Information Service (2008). Selecting a development approach. Webarticle. United States Department of Health and Human Services (HHS). Re-validated: March 27, 2008. Retrieved 27 Oct 2008.</ref>
*'''[[Modem]]'''- (a [[portmanteau]] of modulator-demodulator) is a [[Computer hardware|hardware]] device that converts data into a format suitable for a [[transmission medium]] so that it can be transmitted from one computer to another (historically along telephone wires). A modem [[Modulation#Digital modulation methods|modulates]] one or more [[carrier wave]] signals to encode [[digital information]] for transmission and [[Demodulation|demodulates]] signals to decode the transmitted information. The goal is to produce a [[Signal (electronics)|signal]] that can be transmitted easily and decoded reliably to reproduce the original digital data. Modems can be used with almost any means of transmitting analog signals from [[light-emitting diode]]s to [[radio]]. A common type of modem is one that turns the [[digital data]] of a [[computer]] into modulated [[electrical signal]] for transmission over [[telephone line]]s and demodulated by another modem at the receiver side to recover the digital data.
*'''[[Natural language processing]]''' – (NLP), is a subfield of [[linguistics]], [[computer science]], [[Information engineering (field)|information engineering]], and [[artificial intelligence]] concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of [[natural language]] data.  Challenges in natural language processing frequently involve [[speech recognition]], [[natural language understanding]], and [[natural language generation]].
*'''[[Number theory]]''' –  is a branch of [[pure mathematics]] devoted primarily to the study of the [[integer]]s and [[arithmetic function|integer-valued functions]].
*'''[[Numerical analysis]]''' – is the study of [[algorithm]]s that use numerical [[approximation]] (as opposed to [[symbolic computation|symbolic manipulations]]) for the problems of [[mathematical analysis]] (as distinguished from [[discrete mathematics]]).
*'''[[Numerical method]]''' –  In [[numerical analysis]], a numerical method is a mathematical tool designed to solve numerical problems. The implementation of a numerical method with an appropriate convergence check in a programming language is called a numerical algorithm.
*'''[[Object (computer science)|Object]]''' – An object can be a [[variable (computer science)|variable]], a [[data structure]], a [[subroutine|function]], or a [[Method (computer programming)|method]], and as such, is a [[Value (computer science)|value]] in [[Memory address|memory]] referenced by an [[identifier (computer programming)|identifier]].  In the [[class-based programming|class-based]] [[object-oriented programming]] paradigm, ''object'' refers to a particular [[Instance (computer science)|instance]] of a [[class (computer science)|class]], where the object can be a combination of variables, functions, and data structures.  In [[Relational model|relational]] [[database]] management, an object can be a table or column, or an association between data and a database entity (such as relating a person's age to a specific person).<ref name=Oppel>{{cite book |first=Andy |last=Oppel |title=SQL Demystified |publisher=McGraw Hill |year=2005| page=7 |isbn=0-07-226224-9}}</ref>
*'''[[Object code]]''' – or object module, is the product of a [[compiler]].<ref>{{cite web|url=http://whatis.techtarget.com/definition/0,,sid9_gci211824,00.html|title=Compiler|publisher=TechTarget|quote=Traditionally, the output of the compilation has been called object code or sometimes an object module.|accessdate=1 September 2011}}</ref> In a general sense object code is a sequence of [[statement (computer science)|statements]] or instructions in a computer language,<ref>{{cite book|last1=Aho|first1=Alfred V.|authorlink1=Alfred Aho|last2=Sethi|first2=Ravi|authorlink2=Ravi Sethi|last3=Ullman|first3=Jeffrey D.|authorlink3=Jeffrey Ullman|title=Compilers: principles, techniques, and tools|series=Computer Science|year=1986|publisher=Mark S. Dalton|isbn=0-201-10194-7|page=704|chapter=10 Code Optimization}}</ref> usually a [[machine code]] language (i.e., [[binary file|binary]]) or an intermediate language such as [[register transfer language]] (RTL). The term indicates that the code is the [[goal]] or result of the compiling process, with some early sources referring to source code as a "subject program."
*'''[[Object-oriented analysis and design]]''' – (OOAD), is a technical approach for analyzing and designing an application, system, or business by applying [[object-oriented programming]], as well as using visual modeling throughout the software development process to guide stakeholder communication and product quality.
*'''[[Object oriented programming]]''' – (OOP),  is a [[programming paradigm]] based on the concept of "[[Object (computer science)|objects]]", which can contain [[data]], in the form of [[Field (computer science)|fields]] (often known as ''attributes'' or ''properties''), and code, in the form of procedures (often known as ''[[Method (computer science)|methods]]''). A feature of objects is an object's procedures that can access and often modify the data fields of the object with which they are associated (objects have a notion of "[[this (computer programming)|this]]" or "self"). In OOP, computer programs are designed by making them out of objects that interact with one another.<ref>{{Cite journal
*'''[[Open-source software]]''' –  (OSS), is a type of [[computer software]] in which [[source code]] is released under a [[Open-source license|license]] in which the [[copyright]] holder grants users the rights to study, change, and [[Software distribution|distribute the software]] to anyone and for any purpose.<ref>{{cite book|author=St. Laurent, Andrew M.|title=Understanding Open Source and Free Software Licensing|publisher=O'Reilly Media|year=2008|isbn=9780596553951|page=4|url=https://books.google.com/books?id=04jG7TTLujoC&pg=PA4}}</ref> Open-source [[software]] may be developed in a [[Open-source model|collaborative public manner]]. Open-source software is a prominent example of [[open collaboration]].<ref name="Open Collaboration">{{Cite journal|last=Levine|first=Sheen S.|last2=Prietula|first2=Michael J.|date=2013-12-30|title=Open Collaboration for Innovation: Principles and Performance|journal=Organization Science|volume=25|issue=5|pages=1414–1433|doi=10.1287/orsc.2013.0872|issn=1047-7039|arxiv=1406.7541}}</ref>
*'''[[Operating system]]''' –  (OS), is [[system software]] that manages [[computer hardware]], [[computer software|software]] resources, and provides common [[daemon (computing)|services]] for [[computer program]]s.
*'''[[Optical fiber]]''' –  is a flexible, [[transparency and translucency|transparent]] [[fiber]] made by [[Drawing (manufacturing)|drawing]] [[glass]] ([[silica]]) or plastic to a diameter slightly thicker than that of a [[Hair's breadth|human hair]].<ref>{{cite web|title=Optical Fiber|url=http://www.thefoa.org/tech/ref/basic/fiber.html|website=www.thefoa.org |publisher=[[The Fiber Optic Association]] |accessdate=17 April 2015}}</ref> Optical fibers are used most often as a means to transmit light between the two ends of the fiber and find wide usage in [[fiber-optic communication]]s, where they permit transmission over longer distances and at higher [[Bandwidth (computing)|bandwidths]] (data rates) than electrical cables. Fibers are used instead of [[metal]] wires because signals travel along them with less [[Attenuation|loss]]; in addition, fibers are immune to [[electromagnetic interference]], a problem from which metal wires suffer.<ref>{{cite book|ref=Senior|last1=Senior|first1=John M.|last2=Jamro|first2=M. Yousif|title=Optical fiber communications: principles and practice|date=2009|publisher=Pearson Education|isbn=978-0130326812|pages=7–9}}</ref>
*'''[[Pair programming]]''' – is an [[agile software development]] technique in which two [[computer programmer|programmers]] work together at one workstation. One, the ''driver'', writes [[Source code|code]] while the other, the ''observer'' or ''navigator'',<ref>{{cite conference |last1=Williams |first1=Laurie|author1-link=Laurie Williams (software engineer) |title=Integrating pair programming into a software development process |pages=27–36 |doi=10.1109/CSEE.2001.913816 |conference=14th Conference on Software Engineering Education and Training |date=February 19–20, 2001 |location=Charlotte |isbn=0-7695-1059-0 |quote=One of the programmers, the driver, has control of the keyboard/mouse and actively implements the program. The other programmer, the observer, continuously observes the work of the driver to identify tactical (syntactic, spelling, etc.) defects, and also thinks strategically about the direction of the work.}}</ref> [[code review|reviews]] each line of code as it is typed in. The two programmers switch roles frequently.
*'''[[Parallel computing]]''' – is a type of [[computing|computation]] in which many calculations or the execution of [[Process (computing)|process]]es are carried out simultaneously.<ref>{{cite book|last=Gottlieb|first=Allan|title=Highly parallel computing|year=1989|publisher=Benjamin/Cummings|location=Redwood City, Calif.|isbn=978-0-8053-0177-9|url=http://dl.acm.org/citation.cfm?id=160438|author2=Almasi, George S.}}</ref> Large problems can often be divided into smaller ones, which can then be solved at the same time. There are several different forms of parallel computing: [[Bit-level parallelism|bit-level]], [[Instruction-level parallelism|instruction-level]], [[Data parallelism|data]], and [[task parallelism]].
*'''[[Parameter (computer programming)|Parameter]]''' – In [[computer programming]], a parameter or a  ''formal argument'', is a special kind of [[Variable (programming)|variable]], used in a [[subroutine]] to refer to one of the pieces of data provided as input to the subroutine.{{efn|1=In this article, the term "subroutine" refers to any subroutine-like construct, which have different names and slightly different meanings depending on the [[programming language]] being discussed.}} These pieces of data are the values<ref>{{cite book|last1=Prata|first1=Stephen|title=C primer plus|date=2004|publisher=Sams|isbn=978-0-672-32696-7|pages=276–277|edition=5th}}</ref><ref>{{cite web|title=Working Draft, Standard for Programming Language C++|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf|website=www.open-std.org|accessdate=1 January 2018}}</ref><ref>{{cite web|last1=Gordon|first1=Aaron|title=Subprograms and Parameter Passing|url=http://rowdysites.msudenver.edu/~gordona/cs3210/lects/lect10.html|website=rowdysites.msudenver.edu/~gordona|accessdate=1 January 2018}}</ref> of the arguments (often called ''actual arguments'' or ''actual parameters'') with which the subroutine is going to be called/invoked. An ordered list of parameters is usually included in the [[function signature|definition of a subroutine]], so that, each time the subroutine is called, its arguments for that call are evaluated, and the resulting values can be assigned to the corresponding parameters.
*'''[[Peripheral]]''' –
*'''[[Postcondition]]''' – In [[computer programming]], a postcondition is a condition or [[Predicate (mathematics)|predicate]] that must always be true just after the execution of some section of code or after an operation in a [[formal specification]]. Postconditions are sometimes tested using [[assertion (computing)|assertions]] within the code itself. Often, postconditions are simply included in the documentation of the affected section of code.
*'''[[Precondition]]''' – In [[computer programming]], a precondition is a condition or [[Predicate (mathematics)|predicate]] that must always be true just prior to the execution of some section of [[code]] or before an operation in a [[formal specification]].  If a precondition is violated, the effect of the section of [[code]] becomes undefined and thus may or may not carry out its intended work.  [[Computer security|Security]] problems can arise due to incorrect preconditions.
*'''[[Primary storage]]''' –
*'''[[Primitive data type]]''' –
*'''[[Priority queue]]''' – is an [[abstract data type]] which is like a regular [[queue (abstract data type)|queue]] or [[stack (abstract data type)|stack]] data structure, but where additionally each element has a "priority" associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some implementations, if two elements have the same priority, they are served according to the order in which they were enqueued, while in other implementations, ordering of elements with the same priority is undefined.
*'''[[Procedural programming]]''' –
*'''[[Program lifecycle phase]]''' – Program lifecycle phases are the stages a [[computer program]] undergoes, from initial creation to deployment and [[Execution (computing)|execution]]. The phases are edit time, compile time, link time, distribution time, installation time, load time, and run time.
*'''[[Programming language]]''' – is a [[formal language]], which comprises a [[Instruction set|set of instructions]] that produce various kinds of [[Input/output|output]]. Programming languages are used in [[computer programming]] to implement [[algorithm]]s.
*'''[[Programming language implementation]]''' –
*'''[[Programming language theory]]''' –
*'''[[Prolog]]''' –
*'''[[Python (programming language)|Python]]''' –
*'''[[Quantum computing]]''' – is the use of [[quantum mechanics|quantum-mechanical]] [[phenomena]] such as [[quantum superposition|superposition]] and [[quantum entanglement|entanglement]] to perform [[computation]]. A quantum computer is used to perform such computation, which can be implemented theoretically or physically.<ref name=2018Report>{{cite book | title=Quantum Computing : Progress and Prospects (2018) | page= I-5 | publisher=National Academies Press | editor-last1 = Grumbling | editor-first1 = Emily | editor-last2 = Horowitz | editor-first2 = Mark | author= The National Academies of Sciences, Engineering, and Medicine|location=Washington, DC | year=2019 | doi=10.17226/25196|isbn=978-0-309-47969-1 | oclc=1081001288 }}</ref>{{rp|I-5}}
*'''[[Queue (abstract data type)|Queue]]''' – is a [[collection (abstract data type)|collection]] in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position, known as ''enqueue'', and removal of entities from the front terminal position, known as ''dequeue''.
*'''[[Quicksort]]''' – (sometimes called ''partition-exchange sort) is an [[Algorithm efficiency|efficient]] [[sorting algorithm]], serving as a systematic method for placing the elements of a [[random access]] [[Computer file|file]] or an [[Array data structure|array]] in order.
*'''[[R (programming language)|R programming language]]''' –
*'''[[Radix]]''' –  In [[numeral system|digital numeral systems]], the radix, or '''base''', is the number of unique [[numerical digit|digits]], including the digit zero, used to represent numbers in a [[positional notation|positional]] [[numeral system]]. For example, for the decimal/denary system (the most common system in use today) the radix (base number) is ten, because it uses the ten digits from 0 through 9.
*'''[[Recursion]]''' –  occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from [[linguistics]] to [[logic]]. The most common application of recursion is in [[mathematics]] and [[computer science]], where a [[function (mathematics)|function]] being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no infinite loop or infinite chain of references can occur.
*'''[[Reference counting]]''' –  is a programming technique of storing the number of [[Reference (computer science)|references]], [[Pointer (computer programming)|pointers]], or [[Handle (computing)|handles]] to a resource, such as an object, a block of memory, disk space, and others.  In [[garbage collection (computer science)|garbage collection]] algorithms, reference counts may be used to deallocate objects which are no longer needed.
*'''[[Relational database]]''' –
*'''[[Reliability engineering]]''' –  is a sub-discipline of [[systems engineering]] that emphasizes [[dependability]] in the [[product lifecycle management|lifecycle management]] of a [[product (business)|product]]. Reliability describes the ability of a system or component to function under stated conditions for a specified period of time.<ref>Institute of Electrical and Electronics Engineers (1990) IEEE Standard Computer Dictionary: A Compilation of IEEE Standard Computer Glossaries. New York, NY {{ISBN|1-55937-079-3}}</ref> Reliability is closely related to [[availability]], which is typically described as the ability of a component or system to function at a specified moment or interval of time.
*'''[[Regression testing]]''' –  (rarely ''non-regression testing''<ref>{{cite book |last1=Pezzè |first1=Mauro |last2=Young |first2=Michal |title=Software testing and analysis: process, principles, and techniques |date=2008 |publisher=Wiley |url=https://www.google.com/search?q=Mauro+%22non-regression%22+%22regression+testing%22 |quote=Testing activities that focus on regression problems are called (non) regression testing. Usually "non" is omitted}}</ref>) is re-running [[functional testing|functional]] and [[non-functional testing|non-functional tests]] to ensure that previously developed and tested software still performs after a change.<ref>{{cite book|last=Basu|first=Anirban| title=Software Quality Assurance, Testing and Metrics| year=2015| publisher=PHI Learning| isbn=978-81-203-5068-7| url=https://books.google.de/books?id=aNTiCQAAQBAJ&pg=PA150}}</ref> If not, that would be called a ''[[software regression|regression]]''. Changes that may require regression testing include [[software bug|bug]] fixes, software enhancements, [[configuration file|configuration]] changes, and even substitution of [[electronic component]]s.<ref>[[National Academies of Sciences, Engineering, and Medicine|National Research Council]] Committee on Aging Avionics in Military Aircraft: [https://www.nap.edu/catalog/10108/aging-avionics-in-military-aircraft ''Aging Avionics in Military Aircraft'']. The National Academies Press, 2001, page 2: ″Each technology-refresh cycle requires regression testing.″</ref> As regression test suites tend to grow with each found defect, test automation is frequently involved. Sometimes a [[change impact analysis]] is performed to determine an appropriate subset of tests (''non-regression analysis''<ref>{{cite book |last1=Boulanger |first1=Jean-Louis |title=CENELEC 50128 and IEC 62279 Standards |date=2015 |publisher=Wiley |isbn=978-1119122487 |url=https://books.google.de/books?id=IbZNCAAAQBAJ&pg=PA149}}</ref>).
*'''[[Requirements analysis]]''' –  In [[systems engineering]] and [[software engineering]], requirements analysis focuses on the tasks that determine the needs or conditions to meet the new or altered product or project, taking account of the possibly conflicting [[requirement]]s of the various [[Stakeholder (corporate)|stakeholders]], ''analyzing, documenting, validating and managing'' software or system requirements.<ref>{{cite book|isbn=9780471972082|title=Requirements Engineering: Processes and Techniques|url=https://archive.org/details/requirementsengi1998koto|url-access=registration|last1=Kotonya|first1=Gerald|last2=Sommerville|first2=Ian|year=1998|location=Chichester, UK|publisher=John Wiley and Sons}}</ref>
*'''[[Robotics]]''' –  is an [[interdisciplinarity|interdisciplinary]] branch of [[List of engineering branches|engineering]] and [[Branch of science|science]] that includes [[mechanical engineering]], [[electronic engineering]], [[Information engineering (field)|information engineering]], [[computer science]], and others. Robotics involves design, construction, operation, and use of [[robot]]s, as well as [[computer system]]s for their perception, control, [[sensory feedback]], and [[information processing]]. The goal of robotics is to design intelligent machines that can help and assist humans in their day-to-day lives and keep everyone safe. 
*'''[[Round-off error]]''' –  A roundoff error,<ref>{{citation |title=Introduction to Numerical Analysis Using MATLAB |author-first=Rizwan |author-last=Butt |publisher=Jones & Bartlett Learning |date=2009 |isbn=978-0-76377376-2 |pages=11–18 |url=https://books.google.com/books?id=QWub-UVGxqkC&pg=PA11}}</ref> also called '''rounding error''',<ref>{{citation |title=Numerical Computation 1: Methods, Software, and Analysis |author-first=Christoph W. |author-last=Ueberhuber |publisher=Springer |date=1997 |isbn=978-3-54062058-7 |url=https://books.google.com/books?id=JH9I7EJh3JUC&pg=PA139 |pages=139–146}}</ref> is the difference between the result produced by a given [[algorithm]] using exact arithmetic and the result produced by the same algorithm using finite-precision, rounded arithmetic.<ref name="Forrester_2018">{{cite book |title= Math/Comp241 Numerical Methods (lecture notes) |author-first=Dick |author-last=Forrester |publisher=[[Dickinson College]] |date=2018}}</ref> Rounding errors are due to inexactness in the representation of real numbers and the arithmetic operations done with them. This is a form of [[quantization error]].<ref>{{citation |title=Information Technology in Theory |author-first1=Pelin |author-last1=Aksoy |author-first2=Laura |author-last2=DeNardis |publisher=Cengage Learning |date=2007 |isbn=978-1-42390140-2 |page=134 |url=https://books.google.com/books?id=KGS5IcixljwC&pg=PA134}}</ref> When using approximation [[equation]]s or algorithms, especially when using finitely many digits to represent real numbers (which in theory have infinitely many digits), one of the goals of [[numerical analysis]] is to [[error analysis (mathematics)|estimate]] computation errors.<ref>{{citation |title=A First Course in Numerical Analysis |edition=2nd |series=Dover Books on Mathematics |author-first1=Anthony |author-last1=Ralston |author-first2=Philip |author-last2=Rabinowitz |publisher=Courier Dover Publications |date=2012 |isbn=978-0-48614029-2 |url=https://books.google.com/books?id=TVq8AQAAQBAJ&pg=PA2 |pages=2–4}}</ref> Computation errors, also called [[numerical error]]s, include both [[truncation error]]s and roundoff errors. 
*'''[[Router (computing)|Router]]''' –  is a [[networking device]] that forwards [[data packet]]s between [[computer network]]s. Routers perform the traffic directing functions on the [[Internet]].  Data sent through the internet, such as a [[web page]] or [[email]], is in the form of data packets.   A packet is typically [[Packet forwarding|forwarded]] from one router to another router through the networks that constitute an [[internetwork]] (e.g. the Internet) until it reaches its destination [[Node (networking)|node]].<ref>{{cite web|url=http://www.tcpipguide.com/free/t_OverviewOfKeyRoutingProtocolConceptsArchitecturesP.htm|title=Overview Of Key Routing Protocol Concepts: Architectures, Protocol Types, Algorithms and Metrics|publisher=Tcpipguide.com|accessdate=15 January 2011|url-status=live|archiveurl=https://web.archive.org/web/20101220111345/http://tcpipguide.com/free/t_OverviewOfKeyRoutingProtocolConceptsArchitecturesP.htm|archivedate=20 December 2010}}</ref>
*'''[[Routing table]]''' –
*'''[[Run time (program lifecycle phase)|Run time]]''' –
*'''[[Run time (program lifecycle phase)|Run time error]]''' –
*'''[[Search algorithm]]''' –  is any [[algorithm]] which solves the [[search problem]], namely, to retrieve information stored within some data structure, or calculated in the [[Feasible region|search space]] of a [[problem domain]], either with [[Continuous or discrete variable|discrete or continuous values]].
*'''[[Auxiliary memory|Secondary storage]]''' –
*'''[[Selection sort]]''' –
*'''[[Semantics (computer science)|Semantics]]''' –
*'''[[Sequence]]''' –
*'''[[Serializable]]''' –
*'''[[Service level agreement]]''' –
*'''[[Set (abstract data type)|Set]]''' –
*'''[[Soft computing]]''' –
*'''[[Software]]''' –
*'''[[Software agent]]''' –
*'''[[Software construction]]''' –
*'''[[Software deployment]]''' –
*'''[[Software design]]''' –
*'''[[Software development]]''' –
*'''[[Software development process]]''' –
*'''[[Software engineering]]''' –
*'''[[Software maintenance]]''' –
*'''[[Software prototyping]]''' –
*'''[[Software requirements specification]]''' –
*'''[[Software testing]]''' –
*'''[[Sorting algorithm]]''' –
*'''[[Source code]]''' –
*'''[[Spiral model]]''' –
*'''[[Stack (abstract data type)|Stack]]''' –
*'''[[Computer data storage|Storage]]''' –
*'''[[String (computer science)|String]]''' –
*'''[[Structured storage]]''' –
*'''[[Subroutine]]''' –
*'''[[Symbolic computation]]''' –
*'''[[Syntax (programming languages)|Syntax]]''' –
*'''[[Syntax error]]''' –
*'''[[System console]]''' –
*'''[[Technical documentation]]''' –  In engineering, '''technical documentation''' refers to any type of [[documentation]] that describes handling, functionality and architecture of a technical product or a product under [[product development|development]] or use.<ref>[http://www.transcom.de/transcom/en/technische-dokumentation.htm What is "technical documentation"?] at Transcom.de. Accessed February 25, 2013.</ref><ref>[http://www.tetras.sk/en/stranka/what-is-technical-documentation What is Technical Documentation?] {{Webarchive|url=https://archive.is/20130418132550/http://www.tetras.sk/en/stranka/what-is-technical-documentation |date=2013-04-18 }} at Tetras Translations. Accessed February 25, 2013.</ref><ref>[http://www.igcseict.info/theory/8/docs/index.html Documenting the New System] at IGCSE ICT. Accessed February 25, 2013.</ref> The intended recipient for product technical documentation is both the (proficient) [[end user]] as well as the administrator / service or [[Maintenance, repair and operations|maintenance]] technician. In contrast to a mere "cookbook" [[User guide|manual]], technical documentation aims at providing enough information for a user to understand inner and outer dependencies of the product at hand.
*'''[[Third-generation programming language]]''' –
*'''[[Top-down and bottom-up design]]''' –
*'''[[Tree (data structure)|Tree]]''' –  is a widely used [[abstract data type]] (ADT) that simulates a hierarchical [[tree structure]], with a root value and subtrees of children with a [[#Terminology|parent node]], represented as a set of linked [[Node (computer science)|nodes]].
*'''[[Type theory]]''' –  In [[mathematics]], [[logic]], and computer science, a type theory is any of a class of [[formal system]]s, some of which can serve as alternatives to [[set theory]] as a [[Foundations of mathematics|foundation for all mathematics]]. In type theory, every "term" has a "type" and operations are restricted to terms of a certain type.
*'''[[Upload]]''' – In [[computer network]]s, to '''upload''' is to send [[Data (computing)|data]] to a remote system such as a [[server (computing)|server]] or another client so that the remote system can store a copy.<ref>{{Cite web|url=https://techterms.com/definition/upload|title=Upload Definition|website=techterms.com|language=en|access-date=2017-03-30}}</ref>
*'''[[URL|Uniform Resource Locator]]''' –  (URL), colloquially termed a '''web address''',{{sfnp|W3C|2009}} is a reference to a [[web resource]] that specifies its location on a [[computer network]] and a mechanism for retrieving it. A URL is a specific type of [[Uniform Resource Identifier]] (URI),<ref>{{Cite web|url=https://zzz.buzz/2017/09/19/forward-and-backslashes-in-urls/|title=Forward and Backslashes in URLs|website=zzz.buzz|language=en|access-date=2018-09-19}}</ref>{{sfnp|RFC 3986|2005}} although many people use the two terms interchangeably.{{sfnp|Joint W3C/IETF URI Planning Interest Group|2002}}{{efn|A URL implies the means to access an indicated resource and is denoted by a protocol or an access mechanism, which is not true of every URI.{{sfnp|RFC 2396|1998}}{{sfnp|Joint W3C/IETF URI Planning Interest Group|2002}}  Thus <code><nowiki>http:</nowiki>//www.example.com</code> is a URL, while <code>www.example.com</code> is not.<ref>{{Cite web|url=https://danielmiessler.com/study/url-uri/#gs.Hs64zOs|title=The Difference Between URLs and URIs|last=Miessler|first=Daniel}}</ref>}} URLs occur most commonly to reference web pages ([[http]]), but are also used for file transfer ([[File Transfer Protocol|ftp]]), email ([[mailto]]), database access ([[Java Database Connectivity|JDBC]]), and many other applications.
*'''[[URL]]''' – Uniform Resource Locator.
*'''[[User agent]]''' –  is software (a [[software agent]]) that is acting on behalf of a [[user (computing)|user]], such as a [[web browser]] that "retrieves, renders and facilitates end user interaction with Web content".<ref>{{cite web|url=https://www.w3.org/WAI/UA/work/wiki/Definition_of_User_Agent |title=W3C Definition of User Agent |publisher=www.w3.org |date=16 June 2011 |accessdate=2018-10-20}}</ref> An email reader is a [[mail user agent]].
*'''[[User interface]]''' –  (UI), in the [[industrial design]] field of [[human–computer interaction|human-computer interaction]], is the space where interactions between humans and machines occur. The goal of this interaction is to allow effective operation and control of the machine from the human end, whilst the machine simultaneously feeds back information that aids the operators' [[decision-making]] process. Examples of this broad concept of user interfaces include the interactive aspects of computer [[operating system]]s, hand [[tools]], [[heavy machinery]] operator controls, and [[Unit operation|process]] controls. The design considerations applicable when creating user interfaces are related to or involve such disciplines as [[ergonomics]] and [[psychology]].
*'''[[User interface design]]''' –  or user interface engineering, is the [[design]] of [[user interface]]s for [[machine]]s and [[software]], such as [[computer]]s, [[home appliance]]s, [[mobile device]]s, and other [[electronics|electronic devices]], with the focus on maximizing [[usability]] and the [[user experience]]. The goal of user interface design is to make the user's interaction as simple and efficient as possible, in terms of accomplishing user goals ([[user-centered design]]).
*'''[[Variable (computer science)|Variable]]''' – In [[computer programming]], a variable, or scalar, is a storage location (identified by a [[memory address]]) paired with an associated [[symbol|symbolic name]] (an ''[[Identifier (computer programming)|identifier]]''), which contains some known or unknown quantity of information referred to as a ''[[value (computer science)|value]]''. The variable name is the usual way to [[Reference (computer science)|reference]] the stored value, in addition to referring to the variable itself, depending on the context. This separation of name and content allows the name to be used independently of the exact information it represents. The identifier in computer [[source code]] can be [[Name binding|bound]] to a [[Value (computer science)|value]] during [[Run time (program lifecycle phase)|run time]], and the value of the variable may thus change during the course of [[Execution (computing)|program execution]].<ref>{{citation | title=Compilers: Principles, Techniques, and Tools | pages=26–28| title-link=Compilers: Principles, Techniques, and Tools}}</ref><ref>{{cite book |last=Knuth |first=Donald |date=1997 |title=The Art of Computer Programming |volume=1 |edition=3rd |location=Reading, Massachusetts |publisher=Addison-Wesley |pages=3–4 |isbn=0-201-89683-4 }}</ref>
*'''[[Virtual machine]]''' – (VM), is an [[Emulator|emulation]] of a computer system.  Virtual machines are based on [[computer architectures]] and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.
*'''[[V-Model (software development)|V-Model]]''' – In [[software development]], the V-model<ref>[[Kevin Forsberg]] and [[Harold Mooz]], "The Relationship of System Engineering to the Project Cycle", in Proceedings of the First Annual Symposium of National Council on System Engineering, October 1991: 57–65.</ref> represents a [[software development process|development process]] that may be considered an extension of the [[waterfall model]], and is an example of the more [[V-model|general V-model]]. Instead of moving down in a linear way, the process steps are bent upwards after the [[source code|coding]] phase, to form the typical V shape. The V-Model demonstrates the relationships between each phase of the development life cycle and its associated phase of [[Software testing|testing]]. The horizontal and vertical axes represent time or project completeness (left-to-right) and level of abstraction (coarsest-grain abstraction uppermost), respectively.
*'''[[WAV]]''' – Waveform Audio File Format.
*'''[[Waterfall model]]''' – is a breakdown of project activities into linear [[sequence|sequential]] phases, where each phase depends on the deliverables of the previous one and corresponds to a specialisation of tasks.  The approach is typical for certain areas of [[engineering design]]. In [[software development process|software development]], it tends to be among the less iterative and flexible approaches, as progress flows in largely one direction ("downwards" like a [[waterfall]]) through the phases of conception, initiation, [[analysis]], [[Software design|design]], [[Software construction|construction]], [[Software testing|testing]], [[Implementation|deployment]] and [[software maintenance|maintenance]].
*'''[[WAV|Waveform Audio File Format]]''' – (WAVE, or WAV due to its [[filename extension]]), is an [[audio file format]] standard, developed by [[Microsoft]] and [[International Business Machines|IBM]], for storing an audio bitstream on [[personal computer|PCs]]. It is an application of the [[Resource Interchange File Format]] (RIFF) [[bitstream format]] method for storing data in "chunks", and thus is also close to the [[8SVX]] and the [[Audio Interchange File Format|AIFF]] format used on [[Amiga]] and [[Apple Macintosh|Macintosh]] computers, respectively. It is the main format used on [[Microsoft Windows]] systems for raw and typically uncompressed audio. The usual bitstream encoding is the [[linear pulse-code modulation]] (LPCM) format.
*'''[[Web crawler]]''' – sometimes called a spider or spiderbot and often shortened to crawler, is an [[Internet bot]] that systematically browses the [[World Wide Web]], typically for the purpose of [[Web indexing]] (''web spidering'').
*'''[[Wi-Fi]]''' –  is a family of wireless networking technologies, based on the [[IEEE 802.11]] family of standards, which are commonly used for [[Wireless LAN|local area network]]ing of devices and [[Internet]] access. ''Wi{{nbh}}Fi'' is a trademark of the non-profit [[Wi-Fi Alliance]], which restricts the use of the term ''Wi-Fi Certified'' to products that successfully complete [[Interoperability Solutions for European Public Administrations|interoperability]] certification testing.<ref>{{cite web|url=http://www.webopedia.com/TERM/W/Wi_Fi.html|title=What is Wi-Fi (IEEE 802.11x)? A Webopedia Definition|last=Beal|first=Vangie|date=|website=Webopedia|archiveurl=https://web.archive.org/web/20120308123721/http://www.webopedia.com/term/w/wi_fi.html|archivedate=2012-03-08|url-status=live|access-date=}}</ref><ref>{{Cite web|url=https://www.theguardian.com/technology/blog/2007/may/21/thedangersof|title=The dangers of Wi-Fi radiation (updated)|first=Jack|last=Schofield|date=21 May 2007|via=www.theguardian.com}}</ref><ref>{{Cite web|url=https://www.wi-fi.org/certification|title=Certification &#124; Wi-Fi Alliance|website=www.wi-fi.org}}</ref>
*'''[[XHTML]]''' – eXtensible HyperText Markup Language, is part of the family of [[XML]] [[markup language]]s. It mirrors or extends versions of the widely used [[HyperText Markup Language]] (HTML), the language in which [[Web page]]s are formulated.
